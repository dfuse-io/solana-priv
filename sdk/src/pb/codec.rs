// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `dfuse/solana/codec/v1/codec.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Slot {
    // message fields
    pub id: ::std::string::String,
    pub number: u64,
    pub previous_id: ::std::string::String,
    pub version: u32,
    pub block: ::protobuf::SingularPtrField<Block>,
    pub transactions: ::protobuf::RepeatedField<Transaction>,
    pub transaction_count: u32,
    pub has_split_account_changes: bool,
    pub account_changes_file_ref: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Slot {
    fn default() -> &'a Slot {
        <Slot as ::protobuf::Message>::default_instance()
    }
}

impl Slot {
    pub fn new() -> Slot {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint64 number = 2;


    pub fn get_number(&self) -> u64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }

    // string previous_id = 3;


    pub fn get_previous_id(&self) -> &str {
        &self.previous_id
    }
    pub fn clear_previous_id(&mut self) {
        self.previous_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_id(&mut self, v: ::std::string::String) {
        self.previous_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_id(&mut self) -> &mut ::std::string::String {
        &mut self.previous_id
    }

    // Take field
    pub fn take_previous_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_id, ::std::string::String::new())
    }

    // uint32 version = 4;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // .dfuse.solana.codec.v1.Block block = 5;


    pub fn get_block(&self) -> &Block {
        self.block.as_ref().unwrap_or_else(|| <Block as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: Block) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut Block {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> Block {
        self.block.take().unwrap_or_else(|| Block::new())
    }

    // repeated .dfuse.solana.codec.v1.Transaction transactions = 7;


    pub fn get_transactions(&self) -> &[Transaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // uint32 transaction_count = 8;


    pub fn get_transaction_count(&self) -> u32 {
        self.transaction_count
    }
    pub fn clear_transaction_count(&mut self) {
        self.transaction_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_transaction_count(&mut self, v: u32) {
        self.transaction_count = v;
    }

    // bool has_split_account_changes = 9;


    pub fn get_has_split_account_changes(&self) -> bool {
        self.has_split_account_changes
    }
    pub fn clear_has_split_account_changes(&mut self) {
        self.has_split_account_changes = false;
    }

    // Param is passed by value, moved
    pub fn set_has_split_account_changes(&mut self, v: bool) {
        self.has_split_account_changes = v;
    }

    // string account_changes_file_ref = 10;


    pub fn get_account_changes_file_ref(&self) -> &str {
        &self.account_changes_file_ref
    }
    pub fn clear_account_changes_file_ref(&mut self) {
        self.account_changes_file_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_changes_file_ref(&mut self, v: ::std::string::String) {
        self.account_changes_file_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_changes_file_ref(&mut self) -> &mut ::std::string::String {
        &mut self.account_changes_file_ref
    }

    // Take field
    pub fn take_account_changes_file_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_changes_file_ref, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Slot {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.transaction_count = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_split_account_changes = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_changes_file_ref)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.previous_id);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.transaction_count != 0 {
            my_size += ::protobuf::rt::value_size(8, self.transaction_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.has_split_account_changes != false {
            my_size += 2;
        }
        if !self.account_changes_file_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.account_changes_file_ref);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.number != 0 {
            os.write_uint64(2, self.number)?;
        }
        if !self.previous_id.is_empty() {
            os.write_string(3, &self.previous_id)?;
        }
        if self.version != 0 {
            os.write_uint32(4, self.version)?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transactions {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.transaction_count != 0 {
            os.write_uint32(8, self.transaction_count)?;
        }
        if self.has_split_account_changes != false {
            os.write_bool(9, self.has_split_account_changes)?;
        }
        if !self.account_changes_file_ref.is_empty() {
            os.write_string(10, &self.account_changes_file_ref)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Slot {
        Slot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Slot| { &m.id },
                |m: &mut Slot| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "number",
                |m: &Slot| { &m.number },
                |m: &mut Slot| { &mut m.number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "previous_id",
                |m: &Slot| { &m.previous_id },
                |m: &mut Slot| { &mut m.previous_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &Slot| { &m.version },
                |m: &mut Slot| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Block>>(
                "block",
                |m: &Slot| { &m.block },
                |m: &mut Slot| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                "transactions",
                |m: &Slot| { &m.transactions },
                |m: &mut Slot| { &mut m.transactions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "transaction_count",
                |m: &Slot| { &m.transaction_count },
                |m: &mut Slot| { &mut m.transaction_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_split_account_changes",
                |m: &Slot| { &m.has_split_account_changes },
                |m: &mut Slot| { &mut m.has_split_account_changes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_changes_file_ref",
                |m: &Slot| { &m.account_changes_file_ref },
                |m: &mut Slot| { &mut m.account_changes_file_ref },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Slot>(
                "Slot",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Slot {
        static instance: ::protobuf::rt::LazyV2<Slot> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Slot::new)
    }
}

impl ::protobuf::Clear for Slot {
    fn clear(&mut self) {
        self.id.clear();
        self.number = 0;
        self.previous_id.clear();
        self.version = 0;
        self.block.clear();
        self.transactions.clear();
        self.transaction_count = 0;
        self.has_split_account_changes = false;
        self.account_changes_file_ref.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Slot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Slot {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    pub id: ::std::string::String,
    pub number: u64,
    pub height: u64,
    pub previous_id: ::std::string::String,
    pub previous_block_slot: u64,
    pub genesis_unix_timestamp: u64,
    pub clock_unix_timestamp: u64,
    pub root_num: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint64 number = 2;


    pub fn get_number(&self) -> u64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }

    // uint64 height = 3;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // string previous_id = 4;


    pub fn get_previous_id(&self) -> &str {
        &self.previous_id
    }
    pub fn clear_previous_id(&mut self) {
        self.previous_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_id(&mut self, v: ::std::string::String) {
        self.previous_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_id(&mut self) -> &mut ::std::string::String {
        &mut self.previous_id
    }

    // Take field
    pub fn take_previous_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_id, ::std::string::String::new())
    }

    // uint64 previous_block_slot = 5;


    pub fn get_previous_block_slot(&self) -> u64 {
        self.previous_block_slot
    }
    pub fn clear_previous_block_slot(&mut self) {
        self.previous_block_slot = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous_block_slot(&mut self, v: u64) {
        self.previous_block_slot = v;
    }

    // uint64 genesis_unix_timestamp = 6;


    pub fn get_genesis_unix_timestamp(&self) -> u64 {
        self.genesis_unix_timestamp
    }
    pub fn clear_genesis_unix_timestamp(&mut self) {
        self.genesis_unix_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_genesis_unix_timestamp(&mut self, v: u64) {
        self.genesis_unix_timestamp = v;
    }

    // uint64 clock_unix_timestamp = 7;


    pub fn get_clock_unix_timestamp(&self) -> u64 {
        self.clock_unix_timestamp
    }
    pub fn clear_clock_unix_timestamp(&mut self) {
        self.clock_unix_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_clock_unix_timestamp(&mut self, v: u64) {
        self.clock_unix_timestamp = v;
    }

    // uint64 root_num = 8;


    pub fn get_root_num(&self) -> u64 {
        self.root_num
    }
    pub fn clear_root_num(&mut self) {
        self.root_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_root_num(&mut self, v: u64) {
        self.root_num = v;
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.previous_block_slot = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.genesis_unix_timestamp = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.clock_unix_timestamp = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.root_num = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.previous_id);
        }
        if self.previous_block_slot != 0 {
            my_size += ::protobuf::rt::value_size(5, self.previous_block_slot, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.genesis_unix_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.genesis_unix_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.clock_unix_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(7, self.clock_unix_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.root_num != 0 {
            my_size += ::protobuf::rt::value_size(8, self.root_num, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.number != 0 {
            os.write_uint64(2, self.number)?;
        }
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        if !self.previous_id.is_empty() {
            os.write_string(4, &self.previous_id)?;
        }
        if self.previous_block_slot != 0 {
            os.write_uint64(5, self.previous_block_slot)?;
        }
        if self.genesis_unix_timestamp != 0 {
            os.write_uint64(6, self.genesis_unix_timestamp)?;
        }
        if self.clock_unix_timestamp != 0 {
            os.write_uint64(7, self.clock_unix_timestamp)?;
        }
        if self.root_num != 0 {
            os.write_uint64(8, self.root_num)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Block| { &m.id },
                |m: &mut Block| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "number",
                |m: &Block| { &m.number },
                |m: &mut Block| { &mut m.number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &Block| { &m.height },
                |m: &mut Block| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "previous_id",
                |m: &Block| { &m.previous_id },
                |m: &mut Block| { &mut m.previous_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "previous_block_slot",
                |m: &Block| { &m.previous_block_slot },
                |m: &mut Block| { &mut m.previous_block_slot },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "genesis_unix_timestamp",
                |m: &Block| { &m.genesis_unix_timestamp },
                |m: &mut Block| { &mut m.genesis_unix_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "clock_unix_timestamp",
                |m: &Block| { &m.clock_unix_timestamp },
                |m: &mut Block| { &mut m.clock_unix_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "root_num",
                |m: &Block| { &m.root_num },
                |m: &mut Block| { &mut m.root_num },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Block>(
                "Block",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Block {
        static instance: ::protobuf::rt::LazyV2<Block> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Block::new)
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.id.clear();
        self.number = 0;
        self.height = 0;
        self.previous_id.clear();
        self.previous_block_slot = 0;
        self.genesis_unix_timestamp = 0;
        self.clock_unix_timestamp = 0;
        self.root_num = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Batch {
    // message fields
    pub transactions: ::protobuf::RepeatedField<Transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Batch {
    fn default() -> &'a Batch {
        <Batch as ::protobuf::Message>::default_instance()
    }
}

impl Batch {
    pub fn new() -> Batch {
        ::std::default::Default::default()
    }

    // repeated .dfuse.solana.codec.v1.Transaction transactions = 1;


    pub fn get_transactions(&self) -> &[Transaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Batch {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Batch {
        Batch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                "transactions",
                |m: &Batch| { &m.transactions },
                |m: &mut Batch| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Batch>(
                "Batch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Batch {
        static instance: ::protobuf::rt::LazyV2<Batch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Batch::new)
    }
}

impl ::protobuf::Clear for Batch {
    fn clear(&mut self) {
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Batch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Batch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChangesBundle {
    // message fields
    pub transactions: ::protobuf::RepeatedField<AccountChangesPerTrxIndex>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChangesBundle {
    fn default() -> &'a AccountChangesBundle {
        <AccountChangesBundle as ::protobuf::Message>::default_instance()
    }
}

impl AccountChangesBundle {
    pub fn new() -> AccountChangesBundle {
        ::std::default::Default::default()
    }

    // repeated .dfuse.solana.codec.v1.AccountChangesPerTrxIndex transactions = 1;


    pub fn get_transactions(&self) -> &[AccountChangesPerTrxIndex] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<AccountChangesPerTrxIndex>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<AccountChangesPerTrxIndex> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<AccountChangesPerTrxIndex> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountChangesBundle {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChangesBundle {
        AccountChangesBundle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChangesPerTrxIndex>>(
                "transactions",
                |m: &AccountChangesBundle| { &m.transactions },
                |m: &mut AccountChangesBundle| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChangesBundle>(
                "AccountChangesBundle",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChangesBundle {
        static instance: ::protobuf::rt::LazyV2<AccountChangesBundle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChangesBundle::new)
    }
}

impl ::protobuf::Clear for AccountChangesBundle {
    fn clear(&mut self) {
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChangesBundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChangesBundle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChangesPerTrxIndex {
    // message fields
    pub TrxId: ::std::string::String,
    pub instructions: ::protobuf::RepeatedField<AccountChangesPerInstruction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChangesPerTrxIndex {
    fn default() -> &'a AccountChangesPerTrxIndex {
        <AccountChangesPerTrxIndex as ::protobuf::Message>::default_instance()
    }
}

impl AccountChangesPerTrxIndex {
    pub fn new() -> AccountChangesPerTrxIndex {
        ::std::default::Default::default()
    }

    // string TrxId = 1;


    pub fn get_TrxId(&self) -> &str {
        &self.TrxId
    }
    pub fn clear_TrxId(&mut self) {
        self.TrxId.clear();
    }

    // Param is passed by value, moved
    pub fn set_TrxId(&mut self, v: ::std::string::String) {
        self.TrxId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_TrxId(&mut self) -> &mut ::std::string::String {
        &mut self.TrxId
    }

    // Take field
    pub fn take_TrxId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.TrxId, ::std::string::String::new())
    }

    // repeated .dfuse.solana.codec.v1.AccountChangesPerInstruction instructions = 2;


    pub fn get_instructions(&self) -> &[AccountChangesPerInstruction] {
        &self.instructions
    }
    pub fn clear_instructions(&mut self) {
        self.instructions.clear();
    }

    // Param is passed by value, moved
    pub fn set_instructions(&mut self, v: ::protobuf::RepeatedField<AccountChangesPerInstruction>) {
        self.instructions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instructions(&mut self) -> &mut ::protobuf::RepeatedField<AccountChangesPerInstruction> {
        &mut self.instructions
    }

    // Take field
    pub fn take_instructions(&mut self) -> ::protobuf::RepeatedField<AccountChangesPerInstruction> {
        ::std::mem::replace(&mut self.instructions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountChangesPerTrxIndex {
    fn is_initialized(&self) -> bool {
        for v in &self.instructions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.TrxId)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instructions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.TrxId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.TrxId);
        }
        for value in &self.instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.TrxId.is_empty() {
            os.write_string(1, &self.TrxId)?;
        }
        for v in &self.instructions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChangesPerTrxIndex {
        AccountChangesPerTrxIndex::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "TrxId",
                |m: &AccountChangesPerTrxIndex| { &m.TrxId },
                |m: &mut AccountChangesPerTrxIndex| { &mut m.TrxId },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChangesPerInstruction>>(
                "instructions",
                |m: &AccountChangesPerTrxIndex| { &m.instructions },
                |m: &mut AccountChangesPerTrxIndex| { &mut m.instructions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChangesPerTrxIndex>(
                "AccountChangesPerTrxIndex",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChangesPerTrxIndex {
        static instance: ::protobuf::rt::LazyV2<AccountChangesPerTrxIndex> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChangesPerTrxIndex::new)
    }
}

impl ::protobuf::Clear for AccountChangesPerTrxIndex {
    fn clear(&mut self) {
        self.TrxId.clear();
        self.instructions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChangesPerTrxIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChangesPerTrxIndex {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChangesPerInstruction {
    // message fields
    pub changes: ::protobuf::RepeatedField<AccountChange>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChangesPerInstruction {
    fn default() -> &'a AccountChangesPerInstruction {
        <AccountChangesPerInstruction as ::protobuf::Message>::default_instance()
    }
}

impl AccountChangesPerInstruction {
    pub fn new() -> AccountChangesPerInstruction {
        ::std::default::Default::default()
    }

    // repeated .dfuse.solana.codec.v1.AccountChange changes = 1;


    pub fn get_changes(&self) -> &[AccountChange] {
        &self.changes
    }
    pub fn clear_changes(&mut self) {
        self.changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_changes(&mut self, v: ::protobuf::RepeatedField<AccountChange>) {
        self.changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_changes(&mut self) -> &mut ::protobuf::RepeatedField<AccountChange> {
        &mut self.changes
    }

    // Take field
    pub fn take_changes(&mut self) -> ::protobuf::RepeatedField<AccountChange> {
        ::std::mem::replace(&mut self.changes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountChangesPerInstruction {
    fn is_initialized(&self) -> bool {
        for v in &self.changes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.changes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.changes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChangesPerInstruction {
        AccountChangesPerInstruction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChange>>(
                "changes",
                |m: &AccountChangesPerInstruction| { &m.changes },
                |m: &mut AccountChangesPerInstruction| { &mut m.changes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChangesPerInstruction>(
                "AccountChangesPerInstruction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChangesPerInstruction {
        static instance: ::protobuf::rt::LazyV2<AccountChangesPerInstruction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChangesPerInstruction::new)
    }
}

impl ::protobuf::Clear for AccountChangesPerInstruction {
    fn clear(&mut self) {
        self.changes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChangesPerInstruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChangesPerInstruction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message fields
    pub id: ::std::string::String,
    pub slot_num: u64,
    pub slot_hash: ::std::string::String,
    pub index: u64,
    pub additional_signatures: ::protobuf::RepeatedField<::std::string::String>,
    pub header: ::protobuf::SingularPtrField<MessageHeader>,
    pub account_keys: ::protobuf::RepeatedField<::std::string::String>,
    pub recent_blockhash: ::std::string::String,
    pub log_messages: ::protobuf::RepeatedField<::std::string::String>,
    pub instructions: ::protobuf::RepeatedField<Instruction>,
    pub failed: bool,
    pub error: ::protobuf::SingularPtrField<TransactionError>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint64 slot_num = 2;


    pub fn get_slot_num(&self) -> u64 {
        self.slot_num
    }
    pub fn clear_slot_num(&mut self) {
        self.slot_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_slot_num(&mut self, v: u64) {
        self.slot_num = v;
    }

    // string slot_hash = 3;


    pub fn get_slot_hash(&self) -> &str {
        &self.slot_hash
    }
    pub fn clear_slot_hash(&mut self) {
        self.slot_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_slot_hash(&mut self, v: ::std::string::String) {
        self.slot_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slot_hash(&mut self) -> &mut ::std::string::String {
        &mut self.slot_hash
    }

    // Take field
    pub fn take_slot_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slot_hash, ::std::string::String::new())
    }

    // uint64 index = 4;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // repeated string additional_signatures = 5;


    pub fn get_additional_signatures(&self) -> &[::std::string::String] {
        &self.additional_signatures
    }
    pub fn clear_additional_signatures(&mut self) {
        self.additional_signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_additional_signatures(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.additional_signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_additional_signatures(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.additional_signatures
    }

    // Take field
    pub fn take_additional_signatures(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.additional_signatures, ::protobuf::RepeatedField::new())
    }

    // .dfuse.solana.codec.v1.MessageHeader header = 6;


    pub fn get_header(&self) -> &MessageHeader {
        self.header.as_ref().unwrap_or_else(|| <MessageHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: MessageHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut MessageHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> MessageHeader {
        self.header.take().unwrap_or_else(|| MessageHeader::new())
    }

    // repeated string account_keys = 7;


    pub fn get_account_keys(&self) -> &[::std::string::String] {
        &self.account_keys
    }
    pub fn clear_account_keys(&mut self) {
        self.account_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.account_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.account_keys
    }

    // Take field
    pub fn take_account_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.account_keys, ::protobuf::RepeatedField::new())
    }

    // string recent_blockhash = 8;


    pub fn get_recent_blockhash(&self) -> &str {
        &self.recent_blockhash
    }
    pub fn clear_recent_blockhash(&mut self) {
        self.recent_blockhash.clear();
    }

    // Param is passed by value, moved
    pub fn set_recent_blockhash(&mut self, v: ::std::string::String) {
        self.recent_blockhash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recent_blockhash(&mut self) -> &mut ::std::string::String {
        &mut self.recent_blockhash
    }

    // Take field
    pub fn take_recent_blockhash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recent_blockhash, ::std::string::String::new())
    }

    // repeated string log_messages = 12;


    pub fn get_log_messages(&self) -> &[::std::string::String] {
        &self.log_messages
    }
    pub fn clear_log_messages(&mut self) {
        self.log_messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_messages(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.log_messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_log_messages(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.log_messages
    }

    // Take field
    pub fn take_log_messages(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.log_messages, ::protobuf::RepeatedField::new())
    }

    // repeated .dfuse.solana.codec.v1.Instruction instructions = 13;


    pub fn get_instructions(&self) -> &[Instruction] {
        &self.instructions
    }
    pub fn clear_instructions(&mut self) {
        self.instructions.clear();
    }

    // Param is passed by value, moved
    pub fn set_instructions(&mut self, v: ::protobuf::RepeatedField<Instruction>) {
        self.instructions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instructions(&mut self) -> &mut ::protobuf::RepeatedField<Instruction> {
        &mut self.instructions
    }

    // Take field
    pub fn take_instructions(&mut self) -> ::protobuf::RepeatedField<Instruction> {
        ::std::mem::replace(&mut self.instructions, ::protobuf::RepeatedField::new())
    }

    // bool failed = 15;


    pub fn get_failed(&self) -> bool {
        self.failed
    }
    pub fn clear_failed(&mut self) {
        self.failed = false;
    }

    // Param is passed by value, moved
    pub fn set_failed(&mut self, v: bool) {
        self.failed = v;
    }

    // .dfuse.solana.codec.v1.TransactionError error = 16;


    pub fn get_error(&self) -> &TransactionError {
        self.error.as_ref().unwrap_or_else(|| <TransactionError as ::protobuf::Message>::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: TransactionError) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut TransactionError {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> TransactionError {
        self.error.take().unwrap_or_else(|| TransactionError::new())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.instructions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.slot_num = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slot_hash)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.additional_signatures)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.account_keys)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recent_blockhash)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.log_messages)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instructions)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failed = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.slot_num != 0 {
            my_size += ::protobuf::rt::value_size(2, self.slot_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.slot_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.slot_hash);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(4, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.additional_signatures {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.account_keys {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.recent_blockhash.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.recent_blockhash);
        }
        for value in &self.log_messages {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        for value in &self.instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.failed != false {
            my_size += 2;
        }
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.slot_num != 0 {
            os.write_uint64(2, self.slot_num)?;
        }
        if !self.slot_hash.is_empty() {
            os.write_string(3, &self.slot_hash)?;
        }
        if self.index != 0 {
            os.write_uint64(4, self.index)?;
        }
        for v in &self.additional_signatures {
            os.write_string(5, &v)?;
        };
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.account_keys {
            os.write_string(7, &v)?;
        };
        if !self.recent_blockhash.is_empty() {
            os.write_string(8, &self.recent_blockhash)?;
        }
        for v in &self.log_messages {
            os.write_string(12, &v)?;
        };
        for v in &self.instructions {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.failed != false {
            os.write_bool(15, self.failed)?;
        }
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Transaction| { &m.id },
                |m: &mut Transaction| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "slot_num",
                |m: &Transaction| { &m.slot_num },
                |m: &mut Transaction| { &mut m.slot_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slot_hash",
                |m: &Transaction| { &m.slot_hash },
                |m: &mut Transaction| { &mut m.slot_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &Transaction| { &m.index },
                |m: &mut Transaction| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "additional_signatures",
                |m: &Transaction| { &m.additional_signatures },
                |m: &mut Transaction| { &mut m.additional_signatures },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageHeader>>(
                "header",
                |m: &Transaction| { &m.header },
                |m: &mut Transaction| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_keys",
                |m: &Transaction| { &m.account_keys },
                |m: &mut Transaction| { &mut m.account_keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recent_blockhash",
                |m: &Transaction| { &m.recent_blockhash },
                |m: &mut Transaction| { &mut m.recent_blockhash },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_messages",
                |m: &Transaction| { &m.log_messages },
                |m: &mut Transaction| { &mut m.log_messages },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instruction>>(
                "instructions",
                |m: &Transaction| { &m.instructions },
                |m: &mut Transaction| { &mut m.instructions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "failed",
                |m: &Transaction| { &m.failed },
                |m: &mut Transaction| { &mut m.failed },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionError>>(
                "error",
                |m: &Transaction| { &m.error },
                |m: &mut Transaction| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transaction>(
                "Transaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Transaction {
        static instance: ::protobuf::rt::LazyV2<Transaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transaction::new)
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.id.clear();
        self.slot_num = 0;
        self.slot_hash.clear();
        self.index = 0;
        self.additional_signatures.clear();
        self.header.clear();
        self.account_keys.clear();
        self.recent_blockhash.clear();
        self.log_messages.clear();
        self.instructions.clear();
        self.failed = false;
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageHeader {
    // message fields
    pub num_required_signatures: u32,
    pub num_readonly_signed_accounts: u32,
    pub num_readonly_unsigned_accounts: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageHeader {
    fn default() -> &'a MessageHeader {
        <MessageHeader as ::protobuf::Message>::default_instance()
    }
}

impl MessageHeader {
    pub fn new() -> MessageHeader {
        ::std::default::Default::default()
    }

    // uint32 num_required_signatures = 1;


    pub fn get_num_required_signatures(&self) -> u32 {
        self.num_required_signatures
    }
    pub fn clear_num_required_signatures(&mut self) {
        self.num_required_signatures = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_required_signatures(&mut self, v: u32) {
        self.num_required_signatures = v;
    }

    // uint32 num_readonly_signed_accounts = 2;


    pub fn get_num_readonly_signed_accounts(&self) -> u32 {
        self.num_readonly_signed_accounts
    }
    pub fn clear_num_readonly_signed_accounts(&mut self) {
        self.num_readonly_signed_accounts = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_readonly_signed_accounts(&mut self, v: u32) {
        self.num_readonly_signed_accounts = v;
    }

    // uint32 num_readonly_unsigned_accounts = 3;


    pub fn get_num_readonly_unsigned_accounts(&self) -> u32 {
        self.num_readonly_unsigned_accounts
    }
    pub fn clear_num_readonly_unsigned_accounts(&mut self) {
        self.num_readonly_unsigned_accounts = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_readonly_unsigned_accounts(&mut self, v: u32) {
        self.num_readonly_unsigned_accounts = v;
    }
}

impl ::protobuf::Message for MessageHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_required_signatures = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_readonly_signed_accounts = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_readonly_unsigned_accounts = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_required_signatures != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_required_signatures, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_readonly_signed_accounts != 0 {
            my_size += ::protobuf::rt::value_size(2, self.num_readonly_signed_accounts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_readonly_unsigned_accounts != 0 {
            my_size += ::protobuf::rt::value_size(3, self.num_readonly_unsigned_accounts, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_required_signatures != 0 {
            os.write_uint32(1, self.num_required_signatures)?;
        }
        if self.num_readonly_signed_accounts != 0 {
            os.write_uint32(2, self.num_readonly_signed_accounts)?;
        }
        if self.num_readonly_unsigned_accounts != 0 {
            os.write_uint32(3, self.num_readonly_unsigned_accounts)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageHeader {
        MessageHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_required_signatures",
                |m: &MessageHeader| { &m.num_required_signatures },
                |m: &mut MessageHeader| { &mut m.num_required_signatures },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_readonly_signed_accounts",
                |m: &MessageHeader| { &m.num_readonly_signed_accounts },
                |m: &mut MessageHeader| { &mut m.num_readonly_signed_accounts },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_readonly_unsigned_accounts",
                |m: &MessageHeader| { &m.num_readonly_unsigned_accounts },
                |m: &mut MessageHeader| { &mut m.num_readonly_unsigned_accounts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageHeader>(
                "MessageHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageHeader {
        static instance: ::protobuf::rt::LazyV2<MessageHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageHeader::new)
    }
}

impl ::protobuf::Clear for MessageHeader {
    fn clear(&mut self) {
        self.num_required_signatures = 0;
        self.num_readonly_signed_accounts = 0;
        self.num_readonly_unsigned_accounts = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Instruction {
    // message fields
    pub program_id: ::std::string::String,
    pub account_keys: ::protobuf::RepeatedField<::std::string::String>,
    pub data: ::std::vec::Vec<u8>,
    pub ordinal: u32,
    pub parent_ordinal: u32,
    pub depth: u32,
    pub balance_changes: ::protobuf::RepeatedField<BalanceChange>,
    pub account_changes: ::protobuf::RepeatedField<AccountChange>,
    pub failed: bool,
    pub error: ::protobuf::SingularPtrField<InstructionError>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Instruction {
    fn default() -> &'a Instruction {
        <Instruction as ::protobuf::Message>::default_instance()
    }
}

impl Instruction {
    pub fn new() -> Instruction {
        ::std::default::Default::default()
    }

    // string program_id = 3;


    pub fn get_program_id(&self) -> &str {
        &self.program_id
    }
    pub fn clear_program_id(&mut self) {
        self.program_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_program_id(&mut self, v: ::std::string::String) {
        self.program_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_program_id(&mut self) -> &mut ::std::string::String {
        &mut self.program_id
    }

    // Take field
    pub fn take_program_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.program_id, ::std::string::String::new())
    }

    // repeated string account_keys = 4;


    pub fn get_account_keys(&self) -> &[::std::string::String] {
        &self.account_keys
    }
    pub fn clear_account_keys(&mut self) {
        self.account_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.account_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.account_keys
    }

    // Take field
    pub fn take_account_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.account_keys, ::protobuf::RepeatedField::new())
    }

    // bytes data = 5;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // uint32 ordinal = 6;


    pub fn get_ordinal(&self) -> u32 {
        self.ordinal
    }
    pub fn clear_ordinal(&mut self) {
        self.ordinal = 0;
    }

    // Param is passed by value, moved
    pub fn set_ordinal(&mut self, v: u32) {
        self.ordinal = v;
    }

    // uint32 parent_ordinal = 7;


    pub fn get_parent_ordinal(&self) -> u32 {
        self.parent_ordinal
    }
    pub fn clear_parent_ordinal(&mut self) {
        self.parent_ordinal = 0;
    }

    // Param is passed by value, moved
    pub fn set_parent_ordinal(&mut self, v: u32) {
        self.parent_ordinal = v;
    }

    // uint32 depth = 8;


    pub fn get_depth(&self) -> u32 {
        self.depth
    }
    pub fn clear_depth(&mut self) {
        self.depth = 0;
    }

    // Param is passed by value, moved
    pub fn set_depth(&mut self, v: u32) {
        self.depth = v;
    }

    // repeated .dfuse.solana.codec.v1.BalanceChange balance_changes = 9;


    pub fn get_balance_changes(&self) -> &[BalanceChange] {
        &self.balance_changes
    }
    pub fn clear_balance_changes(&mut self) {
        self.balance_changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance_changes(&mut self, v: ::protobuf::RepeatedField<BalanceChange>) {
        self.balance_changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_balance_changes(&mut self) -> &mut ::protobuf::RepeatedField<BalanceChange> {
        &mut self.balance_changes
    }

    // Take field
    pub fn take_balance_changes(&mut self) -> ::protobuf::RepeatedField<BalanceChange> {
        ::std::mem::replace(&mut self.balance_changes, ::protobuf::RepeatedField::new())
    }

    // repeated .dfuse.solana.codec.v1.AccountChange account_changes = 10;


    pub fn get_account_changes(&self) -> &[AccountChange] {
        &self.account_changes
    }
    pub fn clear_account_changes(&mut self) {
        self.account_changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_changes(&mut self, v: ::protobuf::RepeatedField<AccountChange>) {
        self.account_changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_changes(&mut self) -> &mut ::protobuf::RepeatedField<AccountChange> {
        &mut self.account_changes
    }

    // Take field
    pub fn take_account_changes(&mut self) -> ::protobuf::RepeatedField<AccountChange> {
        ::std::mem::replace(&mut self.account_changes, ::protobuf::RepeatedField::new())
    }

    // bool failed = 15;


    pub fn get_failed(&self) -> bool {
        self.failed
    }
    pub fn clear_failed(&mut self) {
        self.failed = false;
    }

    // Param is passed by value, moved
    pub fn set_failed(&mut self, v: bool) {
        self.failed = v;
    }

    // .dfuse.solana.codec.v1.InstructionError error = 16;


    pub fn get_error(&self) -> &InstructionError {
        self.error.as_ref().unwrap_or_else(|| <InstructionError as ::protobuf::Message>::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: InstructionError) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut InstructionError {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> InstructionError {
        self.error.take().unwrap_or_else(|| InstructionError::new())
    }
}

impl ::protobuf::Message for Instruction {
    fn is_initialized(&self) -> bool {
        for v in &self.balance_changes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.account_changes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.program_id)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.account_keys)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ordinal = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.parent_ordinal = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.depth = tmp;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.balance_changes)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.account_changes)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failed = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.program_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.program_id);
        }
        for value in &self.account_keys {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        if self.ordinal != 0 {
            my_size += ::protobuf::rt::value_size(6, self.ordinal, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.parent_ordinal != 0 {
            my_size += ::protobuf::rt::value_size(7, self.parent_ordinal, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.depth != 0 {
            my_size += ::protobuf::rt::value_size(8, self.depth, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.balance_changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.account_changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.failed != false {
            my_size += 2;
        }
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.program_id.is_empty() {
            os.write_string(3, &self.program_id)?;
        }
        for v in &self.account_keys {
            os.write_string(4, &v)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        if self.ordinal != 0 {
            os.write_uint32(6, self.ordinal)?;
        }
        if self.parent_ordinal != 0 {
            os.write_uint32(7, self.parent_ordinal)?;
        }
        if self.depth != 0 {
            os.write_uint32(8, self.depth)?;
        }
        for v in &self.balance_changes {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.account_changes {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.failed != false {
            os.write_bool(15, self.failed)?;
        }
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Instruction {
        Instruction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "program_id",
                |m: &Instruction| { &m.program_id },
                |m: &mut Instruction| { &mut m.program_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_keys",
                |m: &Instruction| { &m.account_keys },
                |m: &mut Instruction| { &mut m.account_keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &Instruction| { &m.data },
                |m: &mut Instruction| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "ordinal",
                |m: &Instruction| { &m.ordinal },
                |m: &mut Instruction| { &mut m.ordinal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "parent_ordinal",
                |m: &Instruction| { &m.parent_ordinal },
                |m: &mut Instruction| { &mut m.parent_ordinal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "depth",
                |m: &Instruction| { &m.depth },
                |m: &mut Instruction| { &mut m.depth },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BalanceChange>>(
                "balance_changes",
                |m: &Instruction| { &m.balance_changes },
                |m: &mut Instruction| { &mut m.balance_changes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChange>>(
                "account_changes",
                |m: &Instruction| { &m.account_changes },
                |m: &mut Instruction| { &mut m.account_changes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "failed",
                |m: &Instruction| { &m.failed },
                |m: &mut Instruction| { &mut m.failed },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstructionError>>(
                "error",
                |m: &Instruction| { &m.error },
                |m: &mut Instruction| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Instruction>(
                "Instruction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Instruction {
        static instance: ::protobuf::rt::LazyV2<Instruction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Instruction::new)
    }
}

impl ::protobuf::Clear for Instruction {
    fn clear(&mut self) {
        self.program_id.clear();
        self.account_keys.clear();
        self.data.clear();
        self.ordinal = 0;
        self.parent_ordinal = 0;
        self.depth = 0;
        self.balance_changes.clear();
        self.account_changes.clear();
        self.failed = false;
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Instruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instruction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BalanceChange {
    // message fields
    pub pubkey: ::std::string::String,
    pub prev_lamports: u64,
    pub new_lamports: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BalanceChange {
    fn default() -> &'a BalanceChange {
        <BalanceChange as ::protobuf::Message>::default_instance()
    }
}

impl BalanceChange {
    pub fn new() -> BalanceChange {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }

    // uint64 prev_lamports = 2;


    pub fn get_prev_lamports(&self) -> u64 {
        self.prev_lamports
    }
    pub fn clear_prev_lamports(&mut self) {
        self.prev_lamports = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_lamports(&mut self, v: u64) {
        self.prev_lamports = v;
    }

    // uint64 new_lamports = 3;


    pub fn get_new_lamports(&self) -> u64 {
        self.new_lamports
    }
    pub fn clear_new_lamports(&mut self) {
        self.new_lamports = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_lamports(&mut self, v: u64) {
        self.new_lamports = v;
    }
}

impl ::protobuf::Message for BalanceChange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.prev_lamports = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.new_lamports = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        if self.prev_lamports != 0 {
            my_size += ::protobuf::rt::value_size(2, self.prev_lamports, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.new_lamports != 0 {
            my_size += ::protobuf::rt::value_size(3, self.new_lamports, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        if self.prev_lamports != 0 {
            os.write_uint64(2, self.prev_lamports)?;
        }
        if self.new_lamports != 0 {
            os.write_uint64(3, self.new_lamports)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BalanceChange {
        BalanceChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &BalanceChange| { &m.pubkey },
                |m: &mut BalanceChange| { &mut m.pubkey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "prev_lamports",
                |m: &BalanceChange| { &m.prev_lamports },
                |m: &mut BalanceChange| { &mut m.prev_lamports },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "new_lamports",
                |m: &BalanceChange| { &m.new_lamports },
                |m: &mut BalanceChange| { &mut m.new_lamports },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BalanceChange>(
                "BalanceChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BalanceChange {
        static instance: ::protobuf::rt::LazyV2<BalanceChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BalanceChange::new)
    }
}

impl ::protobuf::Clear for BalanceChange {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.prev_lamports = 0;
        self.new_lamports = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BalanceChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BalanceChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChange {
    // message fields
    pub pubkey: ::std::string::String,
    pub prev_data: ::std::vec::Vec<u8>,
    pub new_data: ::std::vec::Vec<u8>,
    pub new_data_length: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChange {
    fn default() -> &'a AccountChange {
        <AccountChange as ::protobuf::Message>::default_instance()
    }
}

impl AccountChange {
    pub fn new() -> AccountChange {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }

    // bytes prev_data = 2;


    pub fn get_prev_data(&self) -> &[u8] {
        &self.prev_data
    }
    pub fn clear_prev_data(&mut self) {
        self.prev_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_prev_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.prev_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.prev_data
    }

    // Take field
    pub fn take_prev_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.prev_data, ::std::vec::Vec::new())
    }

    // bytes new_data = 3;


    pub fn get_new_data(&self) -> &[u8] {
        &self.new_data
    }
    pub fn clear_new_data(&mut self) {
        self.new_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.new_data
    }

    // Take field
    pub fn take_new_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.new_data, ::std::vec::Vec::new())
    }

    // uint64 new_data_length = 4;


    pub fn get_new_data_length(&self) -> u64 {
        self.new_data_length
    }
    pub fn clear_new_data_length(&mut self) {
        self.new_data_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_data_length(&mut self, v: u64) {
        self.new_data_length = v;
    }
}

impl ::protobuf::Message for AccountChange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.prev_data)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.new_data)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.new_data_length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        if !self.prev_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.prev_data);
        }
        if !self.new_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.new_data);
        }
        if self.new_data_length != 0 {
            my_size += ::protobuf::rt::value_size(4, self.new_data_length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        if !self.prev_data.is_empty() {
            os.write_bytes(2, &self.prev_data)?;
        }
        if !self.new_data.is_empty() {
            os.write_bytes(3, &self.new_data)?;
        }
        if self.new_data_length != 0 {
            os.write_uint64(4, self.new_data_length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChange {
        AccountChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &AccountChange| { &m.pubkey },
                |m: &mut AccountChange| { &mut m.pubkey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "prev_data",
                |m: &AccountChange| { &m.prev_data },
                |m: &mut AccountChange| { &mut m.prev_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "new_data",
                |m: &AccountChange| { &m.new_data },
                |m: &mut AccountChange| { &mut m.new_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "new_data_length",
                |m: &AccountChange| { &m.new_data_length },
                |m: &mut AccountChange| { &mut m.new_data_length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChange>(
                "AccountChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChange {
        static instance: ::protobuf::rt::LazyV2<AccountChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChange::new)
    }
}

impl ::protobuf::Clear for AccountChange {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.prev_data.clear();
        self.new_data.clear();
        self.new_data_length = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionError {
    // message fields
    pub field_type: TransactionErrorType,
    pub payload: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionError {
    fn default() -> &'a TransactionError {
        <TransactionError as ::protobuf::Message>::default_instance()
    }
}

impl TransactionError {
    pub fn new() -> TransactionError {
        ::std::default::Default::default()
    }

    // .dfuse.solana.codec.v1.TransactionErrorType type = 1;


    pub fn get_field_type(&self) -> TransactionErrorType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TransactionErrorType::ACCOUNT_IN_USE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TransactionErrorType) {
        self.field_type = v;
    }

    // .google.protobuf.Any payload = 2;


    pub fn get_payload(&self) -> &::protobuf::well_known_types::Any {
        self.payload.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::protobuf::well_known_types::Any) {
        self.payload = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::protobuf::well_known_types::Any {
        self.payload.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for TransactionError {
    fn is_initialized(&self) -> bool {
        for v in &self.payload {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != TransactionErrorType::ACCOUNT_IN_USE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if let Some(ref v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != TransactionErrorType::ACCOUNT_IN_USE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionError {
        TransactionError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransactionErrorType>>(
                "type",
                |m: &TransactionError| { &m.field_type },
                |m: &mut TransactionError| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "payload",
                |m: &TransactionError| { &m.payload },
                |m: &mut TransactionError| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionError>(
                "TransactionError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionError {
        static instance: ::protobuf::rt::LazyV2<TransactionError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionError::new)
    }
}

impl ::protobuf::Clear for TransactionError {
    fn clear(&mut self) {
        self.field_type = TransactionErrorType::ACCOUNT_IN_USE;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionInstructionError {
    // message fields
    pub Index: u32,
    pub error: ::protobuf::SingularPtrField<InstructionError>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionInstructionError {
    fn default() -> &'a TransactionInstructionError {
        <TransactionInstructionError as ::protobuf::Message>::default_instance()
    }
}

impl TransactionInstructionError {
    pub fn new() -> TransactionInstructionError {
        ::std::default::Default::default()
    }

    // uint32 Index = 1;


    pub fn get_Index(&self) -> u32 {
        self.Index
    }
    pub fn clear_Index(&mut self) {
        self.Index = 0;
    }

    // Param is passed by value, moved
    pub fn set_Index(&mut self, v: u32) {
        self.Index = v;
    }

    // .dfuse.solana.codec.v1.InstructionError error = 2;


    pub fn get_error(&self) -> &InstructionError {
        self.error.as_ref().unwrap_or_else(|| <InstructionError as ::protobuf::Message>::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: InstructionError) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut InstructionError {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> InstructionError {
        self.error.take().unwrap_or_else(|| InstructionError::new())
    }
}

impl ::protobuf::Message for TransactionInstructionError {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.Index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.Index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.Index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.Index != 0 {
            os.write_uint32(1, self.Index)?;
        }
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionInstructionError {
        TransactionInstructionError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "Index",
                |m: &TransactionInstructionError| { &m.Index },
                |m: &mut TransactionInstructionError| { &mut m.Index },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstructionError>>(
                "error",
                |m: &TransactionInstructionError| { &m.error },
                |m: &mut TransactionInstructionError| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionInstructionError>(
                "TransactionInstructionError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionInstructionError {
        static instance: ::protobuf::rt::LazyV2<TransactionInstructionError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionInstructionError::new)
    }
}

impl ::protobuf::Clear for TransactionInstructionError {
    fn clear(&mut self) {
        self.Index = 0;
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionInstructionError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionInstructionError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstructionError {
    // message fields
    pub field_type: InstructionErrorType,
    pub payload: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstructionError {
    fn default() -> &'a InstructionError {
        <InstructionError as ::protobuf::Message>::default_instance()
    }
}

impl InstructionError {
    pub fn new() -> InstructionError {
        ::std::default::Default::default()
    }

    // .dfuse.solana.codec.v1.InstructionErrorType type = 2;


    pub fn get_field_type(&self) -> InstructionErrorType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = InstructionErrorType::GENERIC_ERROR;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: InstructionErrorType) {
        self.field_type = v;
    }

    // .google.protobuf.Any payload = 3;


    pub fn get_payload(&self) -> &::protobuf::well_known_types::Any {
        self.payload.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::protobuf::well_known_types::Any) {
        self.payload = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::protobuf::well_known_types::Any {
        self.payload.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for InstructionError {
    fn is_initialized(&self) -> bool {
        for v in &self.payload {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != InstructionErrorType::GENERIC_ERROR {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if let Some(ref v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != InstructionErrorType::GENERIC_ERROR {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstructionError {
        InstructionError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InstructionErrorType>>(
                "type",
                |m: &InstructionError| { &m.field_type },
                |m: &mut InstructionError| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "payload",
                |m: &InstructionError| { &m.payload },
                |m: &mut InstructionError| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstructionError>(
                "InstructionError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstructionError {
        static instance: ::protobuf::rt::LazyV2<InstructionError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstructionError::new)
    }
}

impl ::protobuf::Clear for InstructionError {
    fn clear(&mut self) {
        self.field_type = InstructionErrorType::GENERIC_ERROR;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstructionError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstructionError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstructionErrorCustom {
    // message fields
    pub id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstructionErrorCustom {
    fn default() -> &'a InstructionErrorCustom {
        <InstructionErrorCustom as ::protobuf::Message>::default_instance()
    }
}

impl InstructionErrorCustom {
    pub fn new() -> InstructionErrorCustom {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }
}

impl ::protobuf::Message for InstructionErrorCustom {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstructionErrorCustom {
        InstructionErrorCustom::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &InstructionErrorCustom| { &m.id },
                |m: &mut InstructionErrorCustom| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstructionErrorCustom>(
                "InstructionErrorCustom",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstructionErrorCustom {
        static instance: ::protobuf::rt::LazyV2<InstructionErrorCustom> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstructionErrorCustom::new)
    }
}

impl ::protobuf::Clear for InstructionErrorCustom {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstructionErrorCustom {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstructionErrorCustom {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransactionErrorType {
    ACCOUNT_IN_USE = 0,
    ACCOUNT_LOADED_TWICE = 1,
    ACCOUNT_NOT_FOUND = 2,
    PROGRAM_ACCOUNT_NOT_FOUND = 3,
    INSUFFICIENT_FUNDS_FOR_FEE = 4,
    INVALID_ACCOUNT_FOR_FEE = 5,
    DUPLICATE_SIGNATURE = 6,
    BLOCKHASH_NOT_FOUND = 7,
    INSTRUCTION_ERROR = 8,
    CALL_CHAIN_TOO_DEEP = 9,
    MISSING_SIGNATURE_FOR_FEE = 10,
    INVALID_ACCOUNT_INDEX = 11,
    SIGNATURE_FAILURE = 12,
    INVALID_PROGRAM_FOR_EXECUTION = 13,
    SANITIZE_FAILURE = 14,
    CLUSTER_MAINTENANCE = 15,
}

impl ::protobuf::ProtobufEnum for TransactionErrorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionErrorType> {
        match value {
            0 => ::std::option::Option::Some(TransactionErrorType::ACCOUNT_IN_USE),
            1 => ::std::option::Option::Some(TransactionErrorType::ACCOUNT_LOADED_TWICE),
            2 => ::std::option::Option::Some(TransactionErrorType::ACCOUNT_NOT_FOUND),
            3 => ::std::option::Option::Some(TransactionErrorType::PROGRAM_ACCOUNT_NOT_FOUND),
            4 => ::std::option::Option::Some(TransactionErrorType::INSUFFICIENT_FUNDS_FOR_FEE),
            5 => ::std::option::Option::Some(TransactionErrorType::INVALID_ACCOUNT_FOR_FEE),
            6 => ::std::option::Option::Some(TransactionErrorType::DUPLICATE_SIGNATURE),
            7 => ::std::option::Option::Some(TransactionErrorType::BLOCKHASH_NOT_FOUND),
            8 => ::std::option::Option::Some(TransactionErrorType::INSTRUCTION_ERROR),
            9 => ::std::option::Option::Some(TransactionErrorType::CALL_CHAIN_TOO_DEEP),
            10 => ::std::option::Option::Some(TransactionErrorType::MISSING_SIGNATURE_FOR_FEE),
            11 => ::std::option::Option::Some(TransactionErrorType::INVALID_ACCOUNT_INDEX),
            12 => ::std::option::Option::Some(TransactionErrorType::SIGNATURE_FAILURE),
            13 => ::std::option::Option::Some(TransactionErrorType::INVALID_PROGRAM_FOR_EXECUTION),
            14 => ::std::option::Option::Some(TransactionErrorType::SANITIZE_FAILURE),
            15 => ::std::option::Option::Some(TransactionErrorType::CLUSTER_MAINTENANCE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransactionErrorType] = &[
            TransactionErrorType::ACCOUNT_IN_USE,
            TransactionErrorType::ACCOUNT_LOADED_TWICE,
            TransactionErrorType::ACCOUNT_NOT_FOUND,
            TransactionErrorType::PROGRAM_ACCOUNT_NOT_FOUND,
            TransactionErrorType::INSUFFICIENT_FUNDS_FOR_FEE,
            TransactionErrorType::INVALID_ACCOUNT_FOR_FEE,
            TransactionErrorType::DUPLICATE_SIGNATURE,
            TransactionErrorType::BLOCKHASH_NOT_FOUND,
            TransactionErrorType::INSTRUCTION_ERROR,
            TransactionErrorType::CALL_CHAIN_TOO_DEEP,
            TransactionErrorType::MISSING_SIGNATURE_FOR_FEE,
            TransactionErrorType::INVALID_ACCOUNT_INDEX,
            TransactionErrorType::SIGNATURE_FAILURE,
            TransactionErrorType::INVALID_PROGRAM_FOR_EXECUTION,
            TransactionErrorType::SANITIZE_FAILURE,
            TransactionErrorType::CLUSTER_MAINTENANCE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TransactionErrorType>("TransactionErrorType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TransactionErrorType {
}

impl ::std::default::Default for TransactionErrorType {
    fn default() -> Self {
        TransactionErrorType::ACCOUNT_IN_USE
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionErrorType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InstructionErrorType {
    GENERIC_ERROR = 0,
    INVALID_ARGUMENT = 1,
    INVALID_INSTRUCTION_DATA = 2,
    INVALID_ACCOUNT_DATA = 3,
    ACCOUNT_DATA_TOO_SMALL = 4,
    INSUFFICIENT_FUNDS = 5,
    INCORRECT_PROGRAM_ID = 6,
    MISSING_REQUIRED_SIGNATURE = 7,
    ACCOUNT_ALREADY_INITIALIZED = 8,
    UNINITIALIZED_ACCOUNT = 9,
    UNBALANCED_INSTRUCTION = 10,
    MODIFIED_PROGRAM_ID = 11,
    EXTERNAL_ACCOUNT_LAMPORT_SPEND = 12,
    EXTERNAL_ACCOUNT_DATA_MODIFIED = 13,
    READONLY_LAMPORT_CHANGE = 14,
    READONLY_DATA_MODIFIED = 15,
    DUPLICATE_ACCOUNT_INDEX = 16,
    EXECUTABLE_MODIFIED = 17,
    RENT_EPOCH_MODIFIED = 18,
    NOT_ENOUGH_ACCOUNT_KEYS = 19,
    ACCOUNT_DATA_SIZE_CHANGED = 20,
    ACCOUNT_NOT_EXECUTABLE = 21,
    ACCOUNT_BORROW_FAILED = 22,
    ACCOUNT_BORROW_OUTSTANDING = 23,
    DUPLICATE_ACCOUNT_OUT_OF_SYNC = 24,
    CUSTOM = 25,
    INVALID_ERROR = 26,
    EXECUTABLE_DATA_MODIFIED = 27,
    EXECUTABLE_LAMPORT_CHANGE = 28,
    EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT = 29,
    UNSUPPORTED_PROGRAM_ID = 30,
    CALL_DEPTH = 31,
    MISSING_ACCOUNT = 32,
    REENTRANCY_NOT_ALLOWED = 33,
    MAX_SEED_LENGTH_EXCEEDED = 34,
    INVALID_SEEDS = 35,
    INVALID_REALLOC = 36,
    COMPUTATIONAL_BUDGET_EXCEEDED = 37,
    PRIVILEGE_ESCALATION = 38,
    PROGRAM_ENVIRONMENT_SETUP_FAILURE = 39,
    PROGRAM_FAILED_TO_COMPLETE = 40,
    PROGRAM_FAILED_TO_COMPILE = 41,
    IMMUTABLE = 42,
    INCORRECT_AUTHORITY = 43,
}

impl ::protobuf::ProtobufEnum for InstructionErrorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InstructionErrorType> {
        match value {
            0 => ::std::option::Option::Some(InstructionErrorType::GENERIC_ERROR),
            1 => ::std::option::Option::Some(InstructionErrorType::INVALID_ARGUMENT),
            2 => ::std::option::Option::Some(InstructionErrorType::INVALID_INSTRUCTION_DATA),
            3 => ::std::option::Option::Some(InstructionErrorType::INVALID_ACCOUNT_DATA),
            4 => ::std::option::Option::Some(InstructionErrorType::ACCOUNT_DATA_TOO_SMALL),
            5 => ::std::option::Option::Some(InstructionErrorType::INSUFFICIENT_FUNDS),
            6 => ::std::option::Option::Some(InstructionErrorType::INCORRECT_PROGRAM_ID),
            7 => ::std::option::Option::Some(InstructionErrorType::MISSING_REQUIRED_SIGNATURE),
            8 => ::std::option::Option::Some(InstructionErrorType::ACCOUNT_ALREADY_INITIALIZED),
            9 => ::std::option::Option::Some(InstructionErrorType::UNINITIALIZED_ACCOUNT),
            10 => ::std::option::Option::Some(InstructionErrorType::UNBALANCED_INSTRUCTION),
            11 => ::std::option::Option::Some(InstructionErrorType::MODIFIED_PROGRAM_ID),
            12 => ::std::option::Option::Some(InstructionErrorType::EXTERNAL_ACCOUNT_LAMPORT_SPEND),
            13 => ::std::option::Option::Some(InstructionErrorType::EXTERNAL_ACCOUNT_DATA_MODIFIED),
            14 => ::std::option::Option::Some(InstructionErrorType::READONLY_LAMPORT_CHANGE),
            15 => ::std::option::Option::Some(InstructionErrorType::READONLY_DATA_MODIFIED),
            16 => ::std::option::Option::Some(InstructionErrorType::DUPLICATE_ACCOUNT_INDEX),
            17 => ::std::option::Option::Some(InstructionErrorType::EXECUTABLE_MODIFIED),
            18 => ::std::option::Option::Some(InstructionErrorType::RENT_EPOCH_MODIFIED),
            19 => ::std::option::Option::Some(InstructionErrorType::NOT_ENOUGH_ACCOUNT_KEYS),
            20 => ::std::option::Option::Some(InstructionErrorType::ACCOUNT_DATA_SIZE_CHANGED),
            21 => ::std::option::Option::Some(InstructionErrorType::ACCOUNT_NOT_EXECUTABLE),
            22 => ::std::option::Option::Some(InstructionErrorType::ACCOUNT_BORROW_FAILED),
            23 => ::std::option::Option::Some(InstructionErrorType::ACCOUNT_BORROW_OUTSTANDING),
            24 => ::std::option::Option::Some(InstructionErrorType::DUPLICATE_ACCOUNT_OUT_OF_SYNC),
            25 => ::std::option::Option::Some(InstructionErrorType::CUSTOM),
            26 => ::std::option::Option::Some(InstructionErrorType::INVALID_ERROR),
            27 => ::std::option::Option::Some(InstructionErrorType::EXECUTABLE_DATA_MODIFIED),
            28 => ::std::option::Option::Some(InstructionErrorType::EXECUTABLE_LAMPORT_CHANGE),
            29 => ::std::option::Option::Some(InstructionErrorType::EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT),
            30 => ::std::option::Option::Some(InstructionErrorType::UNSUPPORTED_PROGRAM_ID),
            31 => ::std::option::Option::Some(InstructionErrorType::CALL_DEPTH),
            32 => ::std::option::Option::Some(InstructionErrorType::MISSING_ACCOUNT),
            33 => ::std::option::Option::Some(InstructionErrorType::REENTRANCY_NOT_ALLOWED),
            34 => ::std::option::Option::Some(InstructionErrorType::MAX_SEED_LENGTH_EXCEEDED),
            35 => ::std::option::Option::Some(InstructionErrorType::INVALID_SEEDS),
            36 => ::std::option::Option::Some(InstructionErrorType::INVALID_REALLOC),
            37 => ::std::option::Option::Some(InstructionErrorType::COMPUTATIONAL_BUDGET_EXCEEDED),
            38 => ::std::option::Option::Some(InstructionErrorType::PRIVILEGE_ESCALATION),
            39 => ::std::option::Option::Some(InstructionErrorType::PROGRAM_ENVIRONMENT_SETUP_FAILURE),
            40 => ::std::option::Option::Some(InstructionErrorType::PROGRAM_FAILED_TO_COMPLETE),
            41 => ::std::option::Option::Some(InstructionErrorType::PROGRAM_FAILED_TO_COMPILE),
            42 => ::std::option::Option::Some(InstructionErrorType::IMMUTABLE),
            43 => ::std::option::Option::Some(InstructionErrorType::INCORRECT_AUTHORITY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InstructionErrorType] = &[
            InstructionErrorType::GENERIC_ERROR,
            InstructionErrorType::INVALID_ARGUMENT,
            InstructionErrorType::INVALID_INSTRUCTION_DATA,
            InstructionErrorType::INVALID_ACCOUNT_DATA,
            InstructionErrorType::ACCOUNT_DATA_TOO_SMALL,
            InstructionErrorType::INSUFFICIENT_FUNDS,
            InstructionErrorType::INCORRECT_PROGRAM_ID,
            InstructionErrorType::MISSING_REQUIRED_SIGNATURE,
            InstructionErrorType::ACCOUNT_ALREADY_INITIALIZED,
            InstructionErrorType::UNINITIALIZED_ACCOUNT,
            InstructionErrorType::UNBALANCED_INSTRUCTION,
            InstructionErrorType::MODIFIED_PROGRAM_ID,
            InstructionErrorType::EXTERNAL_ACCOUNT_LAMPORT_SPEND,
            InstructionErrorType::EXTERNAL_ACCOUNT_DATA_MODIFIED,
            InstructionErrorType::READONLY_LAMPORT_CHANGE,
            InstructionErrorType::READONLY_DATA_MODIFIED,
            InstructionErrorType::DUPLICATE_ACCOUNT_INDEX,
            InstructionErrorType::EXECUTABLE_MODIFIED,
            InstructionErrorType::RENT_EPOCH_MODIFIED,
            InstructionErrorType::NOT_ENOUGH_ACCOUNT_KEYS,
            InstructionErrorType::ACCOUNT_DATA_SIZE_CHANGED,
            InstructionErrorType::ACCOUNT_NOT_EXECUTABLE,
            InstructionErrorType::ACCOUNT_BORROW_FAILED,
            InstructionErrorType::ACCOUNT_BORROW_OUTSTANDING,
            InstructionErrorType::DUPLICATE_ACCOUNT_OUT_OF_SYNC,
            InstructionErrorType::CUSTOM,
            InstructionErrorType::INVALID_ERROR,
            InstructionErrorType::EXECUTABLE_DATA_MODIFIED,
            InstructionErrorType::EXECUTABLE_LAMPORT_CHANGE,
            InstructionErrorType::EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT,
            InstructionErrorType::UNSUPPORTED_PROGRAM_ID,
            InstructionErrorType::CALL_DEPTH,
            InstructionErrorType::MISSING_ACCOUNT,
            InstructionErrorType::REENTRANCY_NOT_ALLOWED,
            InstructionErrorType::MAX_SEED_LENGTH_EXCEEDED,
            InstructionErrorType::INVALID_SEEDS,
            InstructionErrorType::INVALID_REALLOC,
            InstructionErrorType::COMPUTATIONAL_BUDGET_EXCEEDED,
            InstructionErrorType::PRIVILEGE_ESCALATION,
            InstructionErrorType::PROGRAM_ENVIRONMENT_SETUP_FAILURE,
            InstructionErrorType::PROGRAM_FAILED_TO_COMPLETE,
            InstructionErrorType::PROGRAM_FAILED_TO_COMPILE,
            InstructionErrorType::IMMUTABLE,
            InstructionErrorType::INCORRECT_AUTHORITY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<InstructionErrorType>("InstructionErrorType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for InstructionErrorType {
}

impl ::std::default::Default for InstructionErrorType {
    fn default() -> Self {
        InstructionErrorType::GENERIC_ERROR
    }
}

impl ::protobuf::reflect::ProtobufValue for InstructionErrorType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!dfuse/solana/codec/v1/codec.proto\x12\x15dfuse.solana.codec.v1\x1a\
    \x19google/protobuf/any.proto\"\x86\x03\n\x04Slot\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x16\n\x06number\x18\x02\x20\x01(\x04R\x06numb\
    er\x12\x1f\n\x0bprevious_id\x18\x03\x20\x01(\tR\npreviousId\x12\x18\n\
    \x07version\x18\x04\x20\x01(\rR\x07version\x122\n\x05block\x18\x05\x20\
    \x01(\x0b2\x1c.dfuse.solana.codec.v1.BlockR\x05block\x12F\n\x0ctransacti\
    ons\x18\x07\x20\x03(\x0b2\".dfuse.solana.codec.v1.TransactionR\x0ctransa\
    ctions\x12+\n\x11transaction_count\x18\x08\x20\x01(\rR\x10transactionCou\
    nt\x129\n\x19has_split_account_changes\x18\t\x20\x01(\x08R\x16hasSplitAc\
    countChanges\x127\n\x18account_changes_file_ref\x18\n\x20\x01(\tR\x15acc\
    ountChangesFileRef\"\x9b\x02\n\x05Block\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \tR\x02id\x12\x16\n\x06number\x18\x02\x20\x01(\x04R\x06number\x12\x16\n\
    \x06height\x18\x03\x20\x01(\x04R\x06height\x12\x1f\n\x0bprevious_id\x18\
    \x04\x20\x01(\tR\npreviousId\x12.\n\x13previous_block_slot\x18\x05\x20\
    \x01(\x04R\x11previousBlockSlot\x124\n\x16genesis_unix_timestamp\x18\x06\
    \x20\x01(\x04R\x14genesisUnixTimestamp\x120\n\x14clock_unix_timestamp\
    \x18\x07\x20\x01(\x04R\x12clockUnixTimestamp\x12\x19\n\x08root_num\x18\
    \x08\x20\x01(\x04R\x07rootNum\"O\n\x05Batch\x12F\n\x0ctransactions\x18\
    \x01\x20\x03(\x0b2\".dfuse.solana.codec.v1.TransactionR\x0ctransactions\
    \"l\n\x14AccountChangesBundle\x12T\n\x0ctransactions\x18\x01\x20\x03(\
    \x0b20.dfuse.solana.codec.v1.AccountChangesPerTrxIndexR\x0ctransactions\
    \"\x8a\x01\n\x19AccountChangesPerTrxIndex\x12\x14\n\x05TrxId\x18\x01\x20\
    \x01(\tR\x05TrxId\x12W\n\x0cinstructions\x18\x02\x20\x03(\x0b23.dfuse.so\
    lana.codec.v1.AccountChangesPerInstructionR\x0cinstructions\"^\n\x1cAcco\
    untChangesPerInstruction\x12>\n\x07changes\x18\x01\x20\x03(\x0b2$.dfuse.\
    solana.codec.v1.AccountChangeR\x07changes\"\xee\x03\n\x0bTransaction\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x19\n\x08slot_num\x18\x02\x20\
    \x01(\x04R\x07slotNum\x12\x1b\n\tslot_hash\x18\x03\x20\x01(\tR\x08slotHa\
    sh\x12\x14\n\x05index\x18\x04\x20\x01(\x04R\x05index\x123\n\x15additiona\
    l_signatures\x18\x05\x20\x03(\tR\x14additionalSignatures\x12<\n\x06heade\
    r\x18\x06\x20\x01(\x0b2$.dfuse.solana.codec.v1.MessageHeaderR\x06header\
    \x12!\n\x0caccount_keys\x18\x07\x20\x03(\tR\x0baccountKeys\x12)\n\x10rec\
    ent_blockhash\x18\x08\x20\x01(\tR\x0frecentBlockhash\x12!\n\x0clog_messa\
    ges\x18\x0c\x20\x03(\tR\x0blogMessages\x12F\n\x0cinstructions\x18\r\x20\
    \x03(\x0b2\".dfuse.solana.codec.v1.InstructionR\x0cinstructions\x12\x16\
    \n\x06failed\x18\x0f\x20\x01(\x08R\x06failed\x12=\n\x05error\x18\x10\x20\
    \x01(\x0b2'.dfuse.solana.codec.v1.TransactionErrorR\x05error\"\xcd\x01\n\
    \rMessageHeader\x126\n\x17num_required_signatures\x18\x01\x20\x01(\rR\
    \x15numRequiredSignatures\x12?\n\x1cnum_readonly_signed_accounts\x18\x02\
    \x20\x01(\rR\x19numReadonlySignedAccounts\x12C\n\x1enum_readonly_unsigne\
    d_accounts\x18\x03\x20\x01(\rR\x1bnumReadonlyUnsignedAccounts\"\xaf\x03\
    \n\x0bInstruction\x12\x1d\n\nprogram_id\x18\x03\x20\x01(\tR\tprogramId\
    \x12!\n\x0caccount_keys\x18\x04\x20\x03(\tR\x0baccountKeys\x12\x12\n\x04\
    data\x18\x05\x20\x01(\x0cR\x04data\x12\x18\n\x07ordinal\x18\x06\x20\x01(\
    \rR\x07ordinal\x12%\n\x0eparent_ordinal\x18\x07\x20\x01(\rR\rparentOrdin\
    al\x12\x14\n\x05depth\x18\x08\x20\x01(\rR\x05depth\x12M\n\x0fbalance_cha\
    nges\x18\t\x20\x03(\x0b2$.dfuse.solana.codec.v1.BalanceChangeR\x0ebalanc\
    eChanges\x12M\n\x0faccount_changes\x18\n\x20\x03(\x0b2$.dfuse.solana.cod\
    ec.v1.AccountChangeR\x0eaccountChanges\x12\x16\n\x06failed\x18\x0f\x20\
    \x01(\x08R\x06failed\x12=\n\x05error\x18\x10\x20\x01(\x0b2'.dfuse.solana\
    .codec.v1.InstructionErrorR\x05error\"o\n\rBalanceChange\x12\x16\n\x06pu\
    bkey\x18\x01\x20\x01(\tR\x06pubkey\x12#\n\rprev_lamports\x18\x02\x20\x01\
    (\x04R\x0cprevLamports\x12!\n\x0cnew_lamports\x18\x03\x20\x01(\x04R\x0bn\
    ewLamports\"\x87\x01\n\rAccountChange\x12\x16\n\x06pubkey\x18\x01\x20\
    \x01(\tR\x06pubkey\x12\x1b\n\tprev_data\x18\x02\x20\x01(\x0cR\x08prevDat\
    a\x12\x19\n\x08new_data\x18\x03\x20\x01(\x0cR\x07newData\x12&\n\x0fnew_d\
    ata_length\x18\x04\x20\x01(\x04R\rnewDataLength\"\x83\x01\n\x10Transacti\
    onError\x12?\n\x04type\x18\x01\x20\x01(\x0e2+.dfuse.solana.codec.v1.Tran\
    sactionErrorTypeR\x04type\x12.\n\x07payload\x18\x02\x20\x01(\x0b2\x14.go\
    ogle.protobuf.AnyR\x07payload\"r\n\x1bTransactionInstructionError\x12\
    \x14\n\x05Index\x18\x01\x20\x01(\rR\x05Index\x12=\n\x05error\x18\x02\x20\
    \x01(\x0b2'.dfuse.solana.codec.v1.InstructionErrorR\x05error\"\x83\x01\n\
    \x10InstructionError\x12?\n\x04type\x18\x02\x20\x01(\x0e2+.dfuse.solana.\
    codec.v1.InstructionErrorTypeR\x04type\x12.\n\x07payload\x18\x03\x20\x01\
    (\x0b2\x14.google.protobuf.AnyR\x07payload\"(\n\x16InstructionErrorCusto\
    m\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id*\xbc\x03\n\x14TransactionErr\
    orType\x12\x12\n\x0eACCOUNT_IN_USE\x10\0\x12\x18\n\x14ACCOUNT_LOADED_TWI\
    CE\x10\x01\x12\x15\n\x11ACCOUNT_NOT_FOUND\x10\x02\x12\x1d\n\x19PROGRAM_A\
    CCOUNT_NOT_FOUND\x10\x03\x12\x1e\n\x1aINSUFFICIENT_FUNDS_FOR_FEE\x10\x04\
    \x12\x1b\n\x17INVALID_ACCOUNT_FOR_FEE\x10\x05\x12\x17\n\x13DUPLICATE_SIG\
    NATURE\x10\x06\x12\x17\n\x13BLOCKHASH_NOT_FOUND\x10\x07\x12\x15\n\x11INS\
    TRUCTION_ERROR\x10\x08\x12\x17\n\x13CALL_CHAIN_TOO_DEEP\x10\t\x12\x1d\n\
    \x19MISSING_SIGNATURE_FOR_FEE\x10\n\x12\x19\n\x15INVALID_ACCOUNT_INDEX\
    \x10\x0b\x12\x15\n\x11SIGNATURE_FAILURE\x10\x0c\x12!\n\x1dINVALID_PROGRA\
    M_FOR_EXECUTION\x10\r\x12\x14\n\x10SANITIZE_FAILURE\x10\x0e\x12\x17\n\
    \x13CLUSTER_MAINTENANCE\x10\x0f*\xce\t\n\x14InstructionErrorType\x12\x11\
    \n\rGENERIC_ERROR\x10\0\x12\x14\n\x10INVALID_ARGUMENT\x10\x01\x12\x1c\n\
    \x18INVALID_INSTRUCTION_DATA\x10\x02\x12\x18\n\x14INVALID_ACCOUNT_DATA\
    \x10\x03\x12\x1a\n\x16ACCOUNT_DATA_TOO_SMALL\x10\x04\x12\x16\n\x12INSUFF\
    ICIENT_FUNDS\x10\x05\x12\x18\n\x14INCORRECT_PROGRAM_ID\x10\x06\x12\x1e\n\
    \x1aMISSING_REQUIRED_SIGNATURE\x10\x07\x12\x1f\n\x1bACCOUNT_ALREADY_INIT\
    IALIZED\x10\x08\x12\x19\n\x15UNINITIALIZED_ACCOUNT\x10\t\x12\x1a\n\x16UN\
    BALANCED_INSTRUCTION\x10\n\x12\x17\n\x13MODIFIED_PROGRAM_ID\x10\x0b\x12\
    \"\n\x1eEXTERNAL_ACCOUNT_LAMPORT_SPEND\x10\x0c\x12\"\n\x1eEXTERNAL_ACCOU\
    NT_DATA_MODIFIED\x10\r\x12\x1b\n\x17READONLY_LAMPORT_CHANGE\x10\x0e\x12\
    \x1a\n\x16READONLY_DATA_MODIFIED\x10\x0f\x12\x1b\n\x17DUPLICATE_ACCOUNT_\
    INDEX\x10\x10\x12\x17\n\x13EXECUTABLE_MODIFIED\x10\x11\x12\x17\n\x13RENT\
    _EPOCH_MODIFIED\x10\x12\x12\x1b\n\x17NOT_ENOUGH_ACCOUNT_KEYS\x10\x13\x12\
    \x1d\n\x19ACCOUNT_DATA_SIZE_CHANGED\x10\x14\x12\x1a\n\x16ACCOUNT_NOT_EXE\
    CUTABLE\x10\x15\x12\x19\n\x15ACCOUNT_BORROW_FAILED\x10\x16\x12\x1e\n\x1a\
    ACCOUNT_BORROW_OUTSTANDING\x10\x17\x12!\n\x1dDUPLICATE_ACCOUNT_OUT_OF_SY\
    NC\x10\x18\x12\n\n\x06CUSTOM\x10\x19\x12\x11\n\rINVALID_ERROR\x10\x1a\
    \x12\x1c\n\x18EXECUTABLE_DATA_MODIFIED\x10\x1b\x12\x1d\n\x19EXECUTABLE_L\
    AMPORT_CHANGE\x10\x1c\x12&\n\"EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT\x10\x1d\
    \x12\x1a\n\x16UNSUPPORTED_PROGRAM_ID\x10\x1e\x12\x0e\n\nCALL_DEPTH\x10\
    \x1f\x12\x13\n\x0fMISSING_ACCOUNT\x10\x20\x12\x1a\n\x16REENTRANCY_NOT_AL\
    LOWED\x10!\x12\x1c\n\x18MAX_SEED_LENGTH_EXCEEDED\x10\"\x12\x11\n\rINVALI\
    D_SEEDS\x10#\x12\x13\n\x0fINVALID_REALLOC\x10$\x12!\n\x1dCOMPUTATIONAL_B\
    UDGET_EXCEEDED\x10%\x12\x18\n\x14PRIVILEGE_ESCALATION\x10&\x12%\n!PROGRA\
    M_ENVIRONMENT_SETUP_FAILURE\x10'\x12\x1e\n\x1aPROGRAM_FAILED_TO_COMPLETE\
    \x10(\x12\x1d\n\x19PROGRAM_FAILED_TO_COMPILE\x10)\x12\r\n\tIMMUTABLE\x10\
    *\x12\x17\n\x13INCORRECT_AUTHORITY\x10+BCZAgithub.com/dfuse-io/dfuse-sol\
    ana/pb/dfuse/solana/codec/v1;pbcodecJ\xeaw\n\x07\x12\x05\0\0\x96\x03\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1e\n\t\n\
    \x02\x03\0\x12\x03\x04\0#\n\x08\n\x01\x08\x12\x03\x05\0X\n\t\n\x02\x08\
    \x0b\x12\x03\x05\0X\n\n\n\x02\x04\0\x12\x04\x08\0\x14\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x08\x08\x0c\n6\n\x04\x04\0\x02\0\x12\x03\t\x02\x10\")\x20\
    hash\x20of\x20the\x20last\x20Entry\x20closing\x20the\x20slot\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\t\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x0e\x0f\n,\n\x04\x04\
    \0\x02\x01\x12\x03\n\x02\x14\"\x1f\x20slot\x20number,\x20not\x20block\
    \x20number\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\n\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \n\x12\x13\n4\n\x04\x04\0\x02\x02\x12\x03\x0b\x02\x19\"'\x20corresponds\
    \x20to\x20the\x20previous\x20SLOT\x20hash\n\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0b\t\x14\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\x17\x18\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x0c\x02\x15\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0c\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0c\t\x10\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x0c\x13\x14\n\x0b\n\x04\x04\0\x02\x04\x12\x03\r\x02\
    \x12\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\r\x08\r\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r\x10\
    \x11\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0f\x02(\n\x0c\n\x05\x04\0\x02\
    \x05\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x0f\x0b\
    \x16\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0f\x17#\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03\x0f&'\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x10\x02\x1f\
    \n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03\x10\t\x1a\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x10\x1d\
    \x1e\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x12\x02%\n\x0c\n\x05\x04\0\x02\
    \x07\x05\x12\x03\x12\x02\x06\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x12\
    \x07\x20\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x12#$\n\x0b\n\x04\x04\0\
    \x02\x08\x12\x03\x13\x02'\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x13\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x13\t!\n\x0c\n\x05\x04\0\x02\
    \x08\x03\x12\x03\x13$&\n\n\n\x02\x04\x01\x12\x04\x16\0\x1f\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x16\x08\r\n3\n\x04\x04\x01\x02\0\x12\x03\x17\x02\
    \x10\"&\x20corresponds\x20to\x20the\x20Slot\x20id\x20(or\x20hash)\n\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x17\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17\x0e\
    \x0f\n<\n\x04\x04\x01\x02\x01\x12\x03\x18\x02\x14\"/\x20corresponds\x20t\
    o\x20the\x20Slot\x20number\x20for\x20this\x20block\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x18\t\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x18\x12\x13\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03\x19\x02\x14\n\x0c\n\x05\x04\x01\x02\x02\x05\
    \x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x19\t\x0f\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x19\x12\x13\nV\n\x04\x04\x01\x02\
    \x03\x12\x03\x1a\x02\x19\"I\x20corresponds\x20to\x20the\x20previous_bloc\
    khash,\x20might\x20skip\x20some\x20slots,\x20so\x20beware\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\x1a\t\x14\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1a\x17\x18\n\
    \x0b\n\x04\x04\x01\x02\x04\x12\x03\x1b\x02!\n\x0c\n\x05\x04\x01\x02\x04\
    \x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x1b\t\
    \x1c\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1b\x1f\x20\n\x0b\n\x04\x04\
    \x01\x02\x05\x12\x03\x1c\x02$\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\
    \x1c\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x1c\t\x1f\n\x0c\n\
    \x05\x04\x01\x02\x05\x03\x12\x03\x1c\"#\n\x0b\n\x04\x04\x01\x02\x06\x12\
    \x03\x1d\x02\"\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x1d\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x06\x01\x12\x03\x1d\t\x1d\n\x0c\n\x05\x04\x01\x02\x06\
    \x03\x12\x03\x1d\x20!\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x1e\x02\x16\n\
    \x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x07\x01\x12\x03\x1e\t\x11\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\
    \x1e\x14\x15\n\n\n\x02\x04\x02\x12\x04!\0#\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03!\x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x03\"\x02(\n\x0c\n\x05\x04\x02\
    \x02\0\x04\x12\x03\"\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\"\x0b\
    \x16\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\"\x17#\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03\"&'\nQ\n\x02\x04\x03\x12\x04&\0)\x01\x1aE\x20Bundled\
    \x20in\x20separate\x20files,\x20referenced\x20by\x20`account_changes_fil\
    e_ref`\n\n\n\n\x03\x04\x03\x01\x12\x03&\x08\x1c\nP\n\x04\x04\x03\x02\0\
    \x12\x03(\x026\x1aC\x20Maps\x20to\x20the\x20index\x20of\x20the\x20`repea\
    ted`\x20field\x20for\x20Block::transactions\n\n\x0c\n\x05\x04\x03\x02\0\
    \x04\x12\x03(\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03(\x0b$\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03(%1\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03(\
    45\n\n\n\x02\x04\x04\x12\x04+\01\x01\n\n\n\x03\x04\x04\x01\x12\x03+\x08!\
    \n\x0b\n\x04\x04\x04\x02\0\x12\x03,\x02\x13\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03,\t\x0e\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03,\x11\x12\nh\n\x04\x04\x04\x02\x01\x12\
    \x030\x029\x1a[\x20Maps\x20to\x20the\x20index\x20within\x20the\x20`repea\
    ted`\x20field\x20of\x20the\x20proto\x20for\n\x20Transaction::instruction\
    s\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x030\x02\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x06\x12\x030\x0b'\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x030(4\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03078\n\n\n\x02\x04\x05\x12\x043\06\
    \x01\n\n\n\x03\x04\x05\x01\x12\x033\x08$\n=\n\x04\x04\x05\x02\0\x12\x035\
    \x02%\x1a0\x20Data\x20to\x20be\x20put\x20in\x20Instruction::account_chan\
    ges\n\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x035\x02\n\n\x0c\n\x05\x04\x05\
    \x02\0\x06\x12\x035\x0b\x18\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x035\x19\
    \x20\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x035#$\n\n\n\x02\x04\x06\x12\x048\
    \0V\x01\n\n\n\x03\x04\x06\x01\x12\x038\x08\x13\n~\n\x04\x04\x06\x02\0\
    \x12\x03;\x02\x10\x1aq\x20The\x20transaction\x20ID\x20corresponds\x20to\
    \x20the\x20_first_\n\x20signature.\x20Additional\x20signatures\x20are\
    \x20in\x20`additional_signatures`.\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\
    \x03;\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03;\t\x0b\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x03;\x0e\x0f\nC\n\x04\x04\x06\x02\x01\x12\x03>\
    \x02\x16\x1a6\x20slot_num\x20could\x20be\x20zero\x20for\x20non-executed\
    \x20transactions\n\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03>\x02\x08\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03>\t\x11\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03>\x14\x15\nE\n\x04\x04\x06\x02\x02\x12\x03@\x02\x17\x1a8\
    \x20slot_hash\x20could\x20be\x20empty\x20for\x20non-executed\x20transact\
    ions\n\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\
    \x06\x02\x02\x01\x12\x03@\t\x12\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03@\
    \x15\x16\n\xc2\x01\n\x04\x04\x06\x02\x03\x12\x03E\x02\x13\x1a\xb4\x01\
    \x20Index\x20from\x20within\x20a\x20single\x20Slot,\x20deterministically\
    \x20ordered\x20to\x20the\n\x20best\x20of\x20our\x20ability\x20using\x20t\
    he\x20transaction\x20ID\x20as\x20a\x20sort\x20key\x20for\n\x20the\x20bat\
    ch\x20of\x20transactions\x20executed\x20in\x20parallel.\n\n\x0c\n\x05\
    \x04\x06\x02\x03\x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\x06\x02\x03\x01\
    \x12\x03E\t\x0e\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03E\x11\x12\n\x0b\n\
    \x04\x04\x06\x02\x04\x12\x03G\x02,\n\x0c\n\x05\x04\x06\x02\x04\x04\x12\
    \x03G\x02\n\n\x0c\n\x05\x04\x06\x02\x04\x05\x12\x03G\x0b\x11\n\x0c\n\x05\
    \x04\x06\x02\x04\x01\x12\x03G\x12'\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\
    \x03G*+\n\x0b\n\x04\x04\x06\x02\x05\x12\x03I\x02\x1b\n\x0c\n\x05\x04\x06\
    \x02\x05\x06\x12\x03I\x02\x0f\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03I\
    \x10\x16\n\x0c\n\x05\x04\x06\x02\x05\x03\x12\x03I\x19\x1a\n/\n\x04\x04\
    \x06\x02\x06\x12\x03K\x02#\x1a\"\x20From\x20the\x20original\x20Message\
    \x20object\n\n\x0c\n\x05\x04\x06\x02\x06\x04\x12\x03K\x02\n\n\x0c\n\x05\
    \x04\x06\x02\x06\x05\x12\x03K\x0b\x11\n\x0c\n\x05\x04\x06\x02\x06\x01\
    \x12\x03K\x12\x1e\n\x0c\n\x05\x04\x06\x02\x06\x03\x12\x03K!\"\n/\n\x04\
    \x04\x06\x02\x07\x12\x03M\x02\x1e\x1a\"\x20From\x20the\x20original\x20Me\
    ssage\x20object\n\n\x0c\n\x05\x04\x06\x02\x07\x05\x12\x03M\x02\x08\n\x0c\
    \n\x05\x04\x06\x02\x07\x01\x12\x03M\t\x19\n\x0c\n\x05\x04\x06\x02\x07\
    \x03\x12\x03M\x1c\x1d\n;\n\x04\x04\x06\x02\x08\x12\x03P\x02$\x1a.\x20Wha\
    t\x20follows\x20Once\x20executed\x20these\x20can\x20be\x20set:\n\n\x0c\n\
    \x05\x04\x06\x02\x08\x04\x12\x03P\x02\n\n\x0c\n\x05\x04\x06\x02\x08\x05\
    \x12\x03P\x0b\x11\n\x0c\n\x05\x04\x06\x02\x08\x01\x12\x03P\x12\x1e\n\x0c\
    \n\x05\x04\x06\x02\x08\x03\x12\x03P!#\nN\n\x04\x04\x06\x02\t\x12\x03R\
    \x02)\x1aA\x20Instructions,\x20containing\x20both\x20top-level\x20and\
    \x20nested\x20transactions\n\n\x0c\n\x05\x04\x06\x02\t\x04\x12\x03R\x02\
    \n\n\x0c\n\x05\x04\x06\x02\t\x06\x12\x03R\x0b\x16\n\x0c\n\x05\x04\x06\
    \x02\t\x01\x12\x03R\x17#\n\x0c\n\x05\x04\x06\x02\t\x03\x12\x03R&(\n\x0b\
    \n\x04\x04\x06\x02\n\x12\x03T\x02\x13\n\x0c\n\x05\x04\x06\x02\n\x05\x12\
    \x03T\x02\x06\n\x0c\n\x05\x04\x06\x02\n\x01\x12\x03T\x07\r\n\x0c\n\x05\
    \x04\x06\x02\n\x03\x12\x03T\x10\x12\n\x0b\n\x04\x04\x06\x02\x0b\x12\x03U\
    \x02\x1e\n\x0c\n\x05\x04\x06\x02\x0b\x06\x12\x03U\x02\x12\n\x0c\n\x05\
    \x04\x06\x02\x0b\x01\x12\x03U\x13\x18\n\x0c\n\x05\x04\x06\x02\x0b\x03\
    \x12\x03U\x1b\x1d\n\n\n\x02\x04\x07\x12\x04X\0\\\x01\n\n\n\x03\x04\x07\
    \x01\x12\x03X\x08\x15\n\x0b\n\x04\x04\x07\x02\0\x12\x03Y\x02%\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x03Y\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03Y\t\x20\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03Y#$\n\x0b\n\x04\x04\
    \x07\x02\x01\x12\x03Z\x02*\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03Z\x02\
    \x08\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03Z\t%\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03Z()\n\x0b\n\x04\x04\x07\x02\x02\x12\x03[\x02,\n\x0c\n\
    \x05\x04\x07\x02\x02\x05\x12\x03[\x02\x08\n\x0c\n\x05\x04\x07\x02\x02\
    \x01\x12\x03[\t'\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03[*+\n\x9f\x03\n\
    \x02\x04\x08\x12\x04k\0{\x012\x92\x03*\n-\x20instr1\x20(id=1,\x20parent=\
    0)\n-\x20instr2\x20(id=2,\x20parent=0)\x20(pubkey1\x20is\x20writable)\n-\
    \x20instr3\x20(id=3,\x20parent=2)\x20(pubkey1\x20is\x20writable)\n-\x20i\
    nstr4\x20(id=4,\x20parent=3)\x20(pubkey1\x20is\x20writable)\n-\x20instr5\
    \x20(id=5,\x20parent=4)\x20(pubkey1\x20is\x20writable,\x20mutates\x20pub\
    key1)\ncollect\x20delta\x20of\x20pubkey1\ncollect\x20delta\x20of\x20pubk\
    ey1\x20ONLY\x20IF\x20CHANGED\x20AGAIN,\x20from\x20last\x20time\x20we\x20\
    took\x20a\x20snapshot\x20of\x20it.\ncollect\x20delta\x20of\x20pubkey1\n-\
    \x20instr6\x20(id=6,\x20parent=0)\n\n\n\n\x03\x04\x08\x01\x12\x03k\x08\
    \x13\n\x0b\n\x04\x04\x08\x02\0\x12\x03l\x02\x18\n\x0c\n\x05\x04\x08\x02\
    \0\x05\x12\x03l\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03l\t\x13\n\
    \x0c\n\x05\x04\x08\x02\0\x03\x12\x03l\x16\x17\n\x0b\n\x04\x04\x08\x02\
    \x01\x12\x03m\x02#\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x03m\x02\n\n\x0c\
    \n\x05\x04\x08\x02\x01\x05\x12\x03m\x0b\x11\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x03m\x12\x1e\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03m!\"\n\x0b\
    \n\x04\x04\x08\x02\x02\x12\x03n\x02\x11\n\x0c\n\x05\x04\x08\x02\x02\x05\
    \x12\x03n\x02\x07\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03n\x08\x0c\n\x0c\
    \n\x05\x04\x08\x02\x02\x03\x12\x03n\x0f\x10\na\n\x04\x04\x08\x02\x03\x12\
    \x03r\x02\x152T\x20What\x20follows\x20is\x20execution\x20trace\x20data,\
    \x20could\x20be\x20empty\x20for\x20un-executed\x20transactions.\n\n\x0c\
    \n\x05\x04\x08\x02\x03\x05\x12\x03r\x02\x08\n\x0c\n\x05\x04\x08\x02\x03\
    \x01\x12\x03r\t\x10\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03r\x13\x14\n\
    \x0b\n\x04\x04\x08\x02\x04\x12\x03s\x02\x1c\n\x0c\n\x05\x04\x08\x02\x04\
    \x05\x12\x03s\x02\x08\n\x0c\n\x05\x04\x08\x02\x04\x01\x12\x03s\t\x17\n\
    \x0c\n\x05\x04\x08\x02\x04\x03\x12\x03s\x1a\x1b\n\x0b\n\x04\x04\x08\x02\
    \x05\x12\x03t\x02\x13\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\x03t\x02\x08\n\
    \x0c\n\x05\x04\x08\x02\x05\x01\x12\x03t\t\x0e\n\x0c\n\x05\x04\x08\x02\
    \x05\x03\x12\x03t\x11\x12\n\x0b\n\x04\x04\x08\x02\x06\x12\x03v\x02-\n\
    \x0c\n\x05\x04\x08\x02\x06\x04\x12\x03v\x02\n\n\x0c\n\x05\x04\x08\x02\
    \x06\x06\x12\x03v\x0b\x18\n\x0c\n\x05\x04\x08\x02\x06\x01\x12\x03v\x19(\
    \n\x0c\n\x05\x04\x08\x02\x06\x03\x12\x03v+,\n\x0b\n\x04\x04\x08\x02\x07\
    \x12\x03w\x02.\n\x0c\n\x05\x04\x08\x02\x07\x04\x12\x03w\x02\n\n\x0c\n\
    \x05\x04\x08\x02\x07\x06\x12\x03w\x0b\x18\n\x0c\n\x05\x04\x08\x02\x07\
    \x01\x12\x03w\x19(\n\x0c\n\x05\x04\x08\x02\x07\x03\x12\x03w+-\n\x0b\n\
    \x04\x04\x08\x02\x08\x12\x03y\x02\x13\n\x0c\n\x05\x04\x08\x02\x08\x05\
    \x12\x03y\x02\x06\n\x0c\n\x05\x04\x08\x02\x08\x01\x12\x03y\x07\r\n\x0c\n\
    \x05\x04\x08\x02\x08\x03\x12\x03y\x10\x12\n\x0b\n\x04\x04\x08\x02\t\x12\
    \x03z\x02\x1e\n\x0c\n\x05\x04\x08\x02\t\x06\x12\x03z\x02\x12\n\x0c\n\x05\
    \x04\x08\x02\t\x01\x12\x03z\x13\x18\n\x0c\n\x05\x04\x08\x02\t\x03\x12\
    \x03z\x1b\x1d\n\x0b\n\x02\x04\t\x12\x05}\0\x81\x01\x01\n\n\n\x03\x04\t\
    \x01\x12\x03}\x08\x15\n\x0b\n\x04\x04\t\x02\0\x12\x03~\x02\x14\n\x0c\n\
    \x05\x04\t\x02\0\x05\x12\x03~\x02\x08\n\x0c\n\x05\x04\t\x02\0\x01\x12\
    \x03~\t\x0f\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03~\x12\x13\n\x0b\n\x04\x04\
    \t\x02\x01\x12\x03\x7f\x02\x1b\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03\x7f\
    \x02\x08\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03\x7f\t\x16\n\x0c\n\x05\x04\
    \t\x02\x01\x03\x12\x03\x7f\x19\x1a\n\x0c\n\x04\x04\t\x02\x02\x12\x04\x80\
    \x01\x02\x1a\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x80\x01\x02\x08\n\r\n\
    \x05\x04\t\x02\x02\x01\x12\x04\x80\x01\t\x15\n\r\n\x05\x04\t\x02\x02\x03\
    \x12\x04\x80\x01\x18\x19\n\x0c\n\x02\x04\n\x12\x06\x83\x01\0\x88\x01\x01\
    \n\x0b\n\x03\x04\n\x01\x12\x04\x83\x01\x08\x15\n\x0c\n\x04\x04\n\x02\0\
    \x12\x04\x84\x01\x02\x14\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x84\x01\x02\
    \x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x84\x01\t\x0f\n\r\n\x05\x04\n\x02\
    \0\x03\x12\x04\x84\x01\x12\x13\n\x0c\n\x04\x04\n\x02\x01\x12\x04\x85\x01\
    \x02\x16\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\x85\x01\x02\x07\n\r\n\x05\
    \x04\n\x02\x01\x01\x12\x04\x85\x01\x08\x11\n\r\n\x05\x04\n\x02\x01\x03\
    \x12\x04\x85\x01\x14\x15\n\x0c\n\x04\x04\n\x02\x02\x12\x04\x86\x01\x02\
    \x15\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\x86\x01\x02\x07\n\r\n\x05\x04\n\
    \x02\x02\x01\x12\x04\x86\x01\x08\x10\n\r\n\x05\x04\n\x02\x02\x03\x12\x04\
    \x86\x01\x13\x14\n\x0c\n\x04\x04\n\x02\x03\x12\x04\x87\x01\x02\x1d\n\r\n\
    \x05\x04\n\x02\x03\x05\x12\x04\x87\x01\x02\x08\n\r\n\x05\x04\n\x02\x03\
    \x01\x12\x04\x87\x01\t\x18\n\r\n\x05\x04\n\x02\x03\x03\x12\x04\x87\x01\
    \x1b\x1c\n\x0c\n\x02\x04\x0b\x12\x06\x8a\x01\0\x8d\x01\x01\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\x8a\x01\x08\x18\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\
    \x8b\x01\x02\x20\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\x8b\x01\x02\x16\n\r\
    \n\x05\x04\x0b\x02\0\x01\x12\x04\x8b\x01\x17\x1b\n\r\n\x05\x04\x0b\x02\0\
    \x03\x12\x04\x8b\x01\x1e\x1f\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\x8c\x01\
    \x02\"\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\x8c\x01\x02\x15\n\r\n\x05\
    \x04\x0b\x02\x01\x01\x12\x04\x8c\x01\x16\x1d\n\r\n\x05\x04\x0b\x02\x01\
    \x03\x12\x04\x8c\x01\x20!\n\x0c\n\x02\x04\x0c\x12\x06\x8f\x01\0\x92\x01\
    \x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\x8f\x01\x08#\n\x0c\n\x04\x04\x0c\
    \x02\0\x12\x04\x90\x01\x02\x13\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\x90\
    \x01\x02\x08\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\x90\x01\t\x0e\n\r\n\x05\
    \x04\x0c\x02\0\x03\x12\x04\x90\x01\x11\x12\n\x0c\n\x04\x04\x0c\x02\x01\
    \x12\x04\x91\x01\x02\x1d\n\r\n\x05\x04\x0c\x02\x01\x06\x12\x04\x91\x01\
    \x02\x12\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\x91\x01\x13\x18\n\r\n\x05\
    \x04\x0c\x02\x01\x03\x12\x04\x91\x01\x1b\x1c\n\x0c\n\x02\x05\0\x12\x06\
    \x94\x01\0\xdb\x01\x01\n\x0b\n\x03\x05\0\x01\x12\x04\x94\x01\x05\x19\n\
    \x8b\x01\n\x04\x05\0\x02\0\x12\x04\x98\x01\x02\x15\x1a}/\x20An\x20accoun\
    t\x20is\x20already\x20being\x20processed\x20in\x20another\x20transaction\
    \x20in\x20a\x20way\n/\x20that\x20does\x20not\x20support\x20parallelism\n\
    \x20Account\x20in\x20use\"\n\n\r\n\x05\x05\0\x02\0\x01\x12\x04\x98\x01\
    \x02\x10\n\r\n\x05\x05\0\x02\0\x02\x12\x04\x98\x01\x13\x14\n\xd8\x01\n\
    \x04\x05\0\x02\x01\x12\x04\x9d\x01\x02\x1b\x1a\xc9\x01/\x20A\x20`Pubkey`\
    \x20appears\x20twice\x20in\x20the\x20transaction's\x20`account_keys`.\
    \x20\x20Instructions\x20can\x20reference\n/\x20`Pubkey`s\x20more\x20than\
    \x20once\x20but\x20the\x20message\x20must\x20contain\x20a\x20list\x20wit\
    h\x20no\x20duplicate\x20keys\n\x20Account\x20loaded\x20twice\"\n\n\r\n\
    \x05\x05\0\x02\x01\x01\x12\x04\x9d\x01\x02\x16\n\r\n\x05\x05\0\x02\x01\
    \x02\x12\x04\x9d\x01\x19\x1a\n\x99\x01\n\x04\x05\0\x02\x02\x12\x04\xa1\
    \x01\x02\x18\x1a\x8a\x01/\x20Attempt\x20to\x20debit\x20an\x20account\x20\
    but\x20found\x20no\x20record\x20of\x20a\x20prior\x20credit.\n\x20Attempt\
    \x20to\x20debit\x20an\x20account\x20but\x20found\x20no\x20record\x20of\
    \x20a\x20prior\x20credit.\"\n\n\r\n\x05\x05\0\x02\x02\x01\x12\x04\xa1\
    \x01\x02\x13\n\r\n\x05\x05\0\x02\x02\x02\x12\x04\xa1\x01\x16\x17\nn\n\
    \x04\x05\0\x02\x03\x12\x04\xa5\x01\x02\x20\x1a`/\x20Attempt\x20to\x20loa\
    d\x20a\x20program\x20that\x20does\x20not\x20exist\n\x20Attempt\x20to\x20\
    load\x20a\x20program\x20that\x20does\x20not\x20exist\"\n\n\r\n\x05\x05\0\
    \x02\x03\x01\x12\x04\xa5\x01\x02\x1b\n\r\n\x05\x05\0\x02\x03\x02\x12\x04\
    \xa5\x01\x1e\x1f\n\x8b\x01\n\x04\x05\0\x02\x04\x12\x04\xa9\x01\x02!\x1a}\
    /\x20The\x20from\x20`Pubkey`\x20does\x20not\x20have\x20sufficient\x20bal\
    ance\x20to\x20pay\x20the\x20fee\x20to\x20schedule\x20the\x20transaction\
    \n\x20Insufficient\x20funds\x20for\x20fee\"\n\n\r\n\x05\x05\0\x02\x04\
    \x01\x12\x04\xa9\x01\x02\x1c\n\r\n\x05\x05\0\x02\x04\x02\x12\x04\xa9\x01\
    \x1f\x20\n|\n\x04\x05\0\x02\x05\x12\x04\xad\x01\x02\x1e\x1an/\x20This\
    \x20account\x20may\x20not\x20be\x20used\x20to\x20pay\x20transaction\x20f\
    ees\n\x20This\x20account\x20may\x20not\x20be\x20used\x20to\x20pay\x20tra\
    nsaction\x20fees\"\n\n\r\n\x05\x05\0\x02\x05\x01\x12\x04\xad\x01\x02\x19\
    \n\r\n\x05\x05\0\x02\x05\x02\x12\x04\xad\x01\x1c\x1d\n\x91\x02\n\x04\x05\
    \0\x02\x06\x12\x04\xb3\x01\x02\x1a\x1a\x82\x02/\x20The\x20bank\x20has\
    \x20seen\x20this\x20`Signature`\x20before.\x20This\x20can\x20occur\x20un\
    der\x20normal\x20operation\n/\x20when\x20a\x20UDP\x20packet\x20is\x20dup\
    licated,\x20as\x20a\x20user\x20error\x20from\x20a\x20client\x20not\x20up\
    dating\n/\x20its\x20`recent_blockhash`,\x20or\x20as\x20a\x20double-spend\
    \x20attack.\n\x20The\x20bank\x20has\x20seen\x20this\x20signature\x20befo\
    re\"\n\n\r\n\x05\x05\0\x02\x06\x01\x12\x04\xb3\x01\x02\x15\n\r\n\x05\x05\
    \0\x02\x06\x02\x12\x04\xb3\x01\x18\x19\n\xa9\x01\n\x04\x05\0\x02\x07\x12\
    \x04\xb8\x01\x02\x1a\x1a\x9a\x01/\x20The\x20bank\x20has\x20not\x20seen\
    \x20the\x20given\x20`recent_blockhash`\x20or\x20the\x20transaction\x20is\
    \x20too\x20old\x20and\n/\x20the\x20`recent_blockhash`\x20has\x20been\x20\
    discarded.\n\x20Blockhash\x20not\x20found\"\n\n\r\n\x05\x05\0\x02\x07\
    \x01\x12\x04\xb8\x01\x02\x15\n\r\n\x05\x05\0\x02\x07\x02\x12\x04\xb8\x01\
    \x18\x19\n\xca\x01\n\x04\x05\0\x02\x08\x12\x04\xbd\x01\x02\x18\x1a\xbb\
    \x01/\x20An\x20error\x20occurred\x20while\x20processing\x20an\x20instruc\
    tion.\x20The\x20first\x20element\x20of\x20the\x20tuple\n/\x20indicates\
    \x20the\x20instruction\x20index\x20in\x20which\x20the\x20error\x20occurr\
    ed.\n\x20Error\x20processing\x20Instruction\x20{0}:\x20{1}\"\n\n\r\n\x05\
    \x05\0\x02\x08\x01\x12\x04\xbd\x01\x02\x13\n\r\n\x05\x05\0\x02\x08\x02\
    \x12\x04\xbd\x01\x16\x17\nN\n\x04\x05\0\x02\t\x12\x04\xc1\x01\x02\x1a\
    \x1a@/\x20Loader\x20call\x20chain\x20is\x20too\x20deep\n\x20Loader\x20ca\
    ll\x20chain\x20is\x20too\x20deep\"\n\n\r\n\x05\x05\0\x02\t\x01\x12\x04\
    \xc1\x01\x02\x15\n\r\n\x05\x05\0\x02\t\x02\x12\x04\xc1\x01\x18\x19\n\x82\
    \x01\n\x04\x05\0\x02\n\x12\x04\xc5\x01\x02!\x1at/\x20Transaction\x20requ\
    ires\x20a\x20fee\x20but\x20has\x20no\x20signature\x20present\n\x20Transa\
    ction\x20requires\x20a\x20fee\x20but\x20has\x20no\x20signature\x20presen\
    t\"\n\n\r\n\x05\x05\0\x02\n\x01\x12\x04\xc5\x01\x02\x1b\n\r\n\x05\x05\0\
    \x02\n\x02\x12\x04\xc5\x01\x1e\x20\nv\n\x04\x05\0\x02\x0b\x12\x04\xc9\
    \x01\x02\x1d\x1ah/\x20Transaction\x20contains\x20an\x20invalid\x20accoun\
    t\x20reference\n\x20Transaction\x20contains\x20an\x20invalid\x20account\
    \x20reference\"\n\n\r\n\x05\x05\0\x02\x0b\x01\x12\x04\xc9\x01\x02\x17\n\
    \r\n\x05\x05\0\x02\x0b\x02\x12\x04\xc9\x01\x1a\x1c\nr\n\x04\x05\0\x02\
    \x0c\x12\x04\xcd\x01\x02\x19\x1ad/\x20Transaction\x20did\x20not\x20pass\
    \x20signature\x20verification\n\x20Transaction\x20did\x20not\x20pass\x20\
    signature\x20verification\"\n\n\r\n\x05\x05\0\x02\x0c\x01\x12\x04\xcd\
    \x01\x02\x13\n\r\n\x05\x05\0\x02\x0c\x02\x12\x04\xcd\x01\x16\x18\n\x82\
    \x01\n\x04\x05\0\x02\r\x12\x04\xd1\x01\x02%\x1at/\x20This\x20program\x20\
    may\x20not\x20be\x20used\x20for\x20executing\x20instructions\n\x20This\
    \x20program\x20may\x20not\x20be\x20used\x20for\x20executing\x20instructi\
    ons\"\n\n\r\n\x05\x05\0\x02\r\x01\x12\x04\xd1\x01\x02\x1f\n\r\n\x05\x05\
    \0\x02\r\x02\x12\x04\xd1\x01\"$\n\xdd\x01\n\x04\x05\0\x02\x0e\x12\x04\
    \xd7\x01\x02\x18\x1a\xce\x01/\x20Transaction\x20failed\x20to\x20sanitize\
    \x20accounts\x20offsets\x20correctly\n/\x20implies\x20that\x20account\
    \x20locks\x20are\x20not\x20taken\x20for\x20this\x20TX,\x20and\x20should\
    \n/\x20not\x20be\x20unlocked.\n\x20Transaction\x20failed\x20to\x20saniti\
    ze\x20accounts\x20offsets\x20correctly\"\n\n\r\n\x05\x05\0\x02\x0e\x01\
    \x12\x04\xd7\x01\x02\x12\n\r\n\x05\x05\0\x02\x0e\x02\x12\x04\xd7\x01\x15\
    \x17\nO\n\x04\x05\0\x02\x0f\x12\x04\xda\x01\x02\x1b\x1aA\x20Transactions\
    \x20are\x20currently\x20disabled\x20due\x20to\x20cluster\x20maintenance\
    \"\n\n\r\n\x05\x05\0\x02\x0f\x01\x12\x04\xda\x01\x02\x15\n\r\n\x05\x05\0\
    \x02\x0f\x02\x12\x04\xda\x01\x18\x1a\n\x0c\n\x02\x04\r\x12\x06\xdd\x01\0\
    \xe0\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\xdd\x01\x08\x18\n\x0c\n\x04\
    \x04\r\x02\0\x12\x04\xde\x01\x02\x20\n\r\n\x05\x04\r\x02\0\x06\x12\x04\
    \xde\x01\x02\x16\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xde\x01\x17\x1b\n\r\n\
    \x05\x04\r\x02\0\x03\x12\x04\xde\x01\x1e\x1f\n\x0c\n\x04\x04\r\x02\x01\
    \x12\x04\xdf\x01\x02\"\n\r\n\x05\x04\r\x02\x01\x06\x12\x04\xdf\x01\x02\
    \x15\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\xdf\x01\x16\x1d\n\r\n\x05\x04\r\
    \x02\x01\x03\x12\x04\xdf\x01\x20!\n\x0c\n\x02\x04\x0e\x12\x06\xe2\x01\0\
    \xe4\x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\xe2\x01\x08\x1e\n\x0c\n\x04\
    \x04\x0e\x02\0\x12\x04\xe3\x01\x02\x10\n\r\n\x05\x04\x0e\x02\0\x05\x12\
    \x04\xe3\x01\x02\x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xe3\x01\t\x0b\n\
    \r\n\x05\x04\x0e\x02\0\x03\x12\x04\xe3\x01\x0e\x0f\n\x0c\n\x02\x05\x01\
    \x12\x06\xe6\x01\0\x96\x03\x01\n\x0b\n\x03\x05\x01\x01\x12\x04\xe6\x01\
    \x05\x19\nz\n\x04\x05\x01\x02\0\x12\x04\xe9\x01\x02\x14\x1al/\x20Depreca\
    ted!\x20Use\x20CustomError\x20instead!\x20The\x20program\x20instruction\
    \x20returned\x20an\x20error\n\x20generic\x20instruction\x20error\n\n\r\n\
    \x05\x05\x01\x02\0\x01\x12\x04\xe9\x01\x02\x0f\n\r\n\x05\x05\x01\x02\0\
    \x02\x12\x04\xe9\x01\x12\x13\n[\n\x04\x05\x01\x02\x01\x12\x04\xec\x01\
    \x02\x17\x1aM/\x20The\x20arguments\x20provided\x20to\x20a\x20program\x20\
    were\x20invalid\n\x20invalid\x20program\x20argument\n\n\r\n\x05\x05\x01\
    \x02\x01\x01\x12\x04\xec\x01\x02\x12\n\r\n\x05\x05\x01\x02\x01\x02\x12\
    \x04\xec\x01\x15\x16\nV\n\x04\x05\x01\x02\x02\x12\x04\xf0\x01\x02\x1f\
    \x1aH/\x20An\x20instruction's\x20data\x20contents\x20were\x20invalid\n\
    \x20invalid\x20instruction\x20data\n\n\r\n\x05\x05\x01\x02\x02\x01\x12\
    \x04\xf0\x01\x02\x1a\n\r\n\x05\x05\x01\x02\x02\x02\x12\x04\xf0\x01\x1d\
    \x1e\n]\n\x04\x05\x01\x02\x03\x12\x04\xf4\x01\x02\x1b\x1aO/\x20An\x20acc\
    ount's\x20data\x20contents\x20was\x20invalid\n\x20invalid\x20account\x20\
    data\x20for\x20instruction\n\n\r\n\x05\x05\x01\x02\x03\x01\x12\x04\xf4\
    \x01\x02\x16\n\r\n\x05\x05\x01\x02\x03\x02\x12\x04\xf4\x01\x19\x1a\nX\n\
    \x04\x05\x01\x02\x04\x12\x04\xf8\x01\x02\x1d\x1aJ/\x20An\x20account's\
    \x20data\x20was\x20too\x20small\n\x20account\x20data\x20too\x20small\x20\
    for\x20instruction\n\n\r\n\x05\x05\x01\x02\x04\x01\x12\x04\xf8\x01\x02\
    \x18\n\r\n\x05\x05\x01\x02\x04\x02\x12\x04\xf8\x01\x1b\x1c\ns\n\x04\x05\
    \x01\x02\x05\x12\x04\xfc\x01\x02\x19\x1ae/\x20An\x20account's\x20balance\
    \x20was\x20too\x20small\x20to\x20complete\x20the\x20instruction\n\x20ins\
    ufficient\x20funds\x20for\x20instruction\n\n\r\n\x05\x05\x01\x02\x05\x01\
    \x12\x04\xfc\x01\x02\x14\n\r\n\x05\x05\x01\x02\x05\x02\x12\x04\xfc\x01\
    \x17\x18\ng\n\x04\x05\x01\x02\x06\x12\x04\x80\x02\x02\x1b\x1aY/\x20The\
    \x20account\x20did\x20not\x20have\x20the\x20expected\x20program\x20id\n\
    \x20incorrect\x20program\x20id\x20for\x20instruction\n\n\r\n\x05\x05\x01\
    \x02\x06\x01\x12\x04\x80\x02\x02\x16\n\r\n\x05\x05\x01\x02\x06\x02\x12\
    \x04\x80\x02\x19\x1a\nc\n\x04\x05\x01\x02\x07\x12\x04\x84\x02\x02!\x1aU/\
    \x20A\x20signature\x20was\x20required\x20but\x20not\x20found\n\x20missin\
    g\x20required\x20signature\x20for\x20instruction\n\n\r\n\x05\x05\x01\x02\
    \x07\x01\x12\x04\x84\x02\x02\x1c\n\r\n\x05\x05\x01\x02\x07\x02\x12\x04\
    \x84\x02\x1f\x20\n\x94\x01\n\x04\x05\x01\x02\x08\x12\x04\x88\x02\x02\"\
    \x1a\x85\x01/\x20An\x20initialize\x20instruction\x20was\x20sent\x20to\
    \x20an\x20account\x20that\x20has\x20already\x20been\x20initialized.\n\
    \x20instruction\x20requires\x20an\x20uninitialized\x20account\n\n\r\n\
    \x05\x05\x01\x02\x08\x01\x12\x04\x88\x02\x02\x1d\n\r\n\x05\x05\x01\x02\
    \x08\x02\x12\x04\x88\x02\x20!\n\x7f\n\x04\x05\x01\x02\t\x12\x04\x8c\x02\
    \x02\x1c\x1aq/\x20An\x20attempt\x20to\x20operate\x20on\x20an\x20account\
    \x20that\x20hasn't\x20been\x20initialized.\n\x20instruction\x20requires\
    \x20an\x20initialized\x20account\n\n\r\n\x05\x05\x01\x02\t\x01\x12\x04\
    \x8c\x02\x02\x17\n\r\n\x05\x05\x01\x02\t\x02\x12\x04\x8c\x02\x1a\x1b\n\
    \xab\x01\n\x04\x05\x01\x02\n\x12\x04\x90\x02\x02\x1e\x1a\x9c\x01/\x20Pro\
    gram's\x20instruction\x20lamport\x20balance\x20does\x20not\x20equal\x20t\
    he\x20balance\x20after\x20the\x20instruction\n\x20sum\x20of\x20account\
    \x20balances\x20before\x20and\x20after\x20instruction\x20do\x20not\x20ma\
    tch\n\n\r\n\x05\x05\x01\x02\n\x01\x12\x04\x90\x02\x02\x18\n\r\n\x05\x05\
    \x01\x02\n\x02\x12\x04\x90\x02\x1b\x1d\nl\n\x04\x05\x01\x02\x0b\x12\x04\
    \x94\x02\x02\x1b\x1a^/\x20Program\x20modified\x20an\x20account's\x20prog\
    ram\x20id\n\x20instruction\x20modified\x20the\x20program\x20id\x20of\x20\
    an\x20account\n\n\r\n\x05\x05\x01\x02\x0b\x01\x12\x04\x94\x02\x02\x15\n\
    \r\n\x05\x05\x01\x02\x0b\x02\x12\x04\x94\x02\x18\x1a\n\x96\x01\n\x04\x05\
    \x01\x02\x0c\x12\x04\x98\x02\x02&\x1a\x87\x01/\x20Program\x20spent\x20th\
    e\x20lamports\x20of\x20an\x20account\x20that\x20doesn't\x20belong\x20to\
    \x20it\n\x20instruction\x20spent\x20from\x20the\x20balance\x20of\x20an\
    \x20account\x20it\x20does\x20not\x20own\n\n\r\n\x05\x05\x01\x02\x0c\x01\
    \x12\x04\x98\x02\x02\x20\n\r\n\x05\x05\x01\x02\x0c\x02\x12\x04\x98\x02#%\
    \n\x8b\x01\n\x04\x05\x01\x02\r\x12\x04\x9c\x02\x02&\x1a}/\x20Program\x20\
    modified\x20the\x20data\x20of\x20an\x20account\x20that\x20doesn't\x20bel\
    ong\x20to\x20it\n\x20instruction\x20modified\x20data\x20of\x20an\x20acco\
    unt\x20it\x20does\x20not\x20own\n\n\r\n\x05\x05\x01\x02\r\x01\x12\x04\
    \x9c\x02\x02\x20\n\r\n\x05\x05\x01\x02\r\x02\x12\x04\x9c\x02#%\nn\n\x04\
    \x05\x01\x02\x0e\x12\x04\xa0\x02\x02\x1f\x1a`/\x20Read-only\x20account's\
    \x20lamports\x20modified\n\x20instruction\x20changed\x20the\x20balance\
    \x20of\x20a\x20read-only\x20account\n\n\r\n\x05\x05\x01\x02\x0e\x01\x12\
    \x04\xa0\x02\x02\x19\n\r\n\x05\x05\x01\x02\x0e\x02\x12\x04\xa0\x02\x1c\
    \x1e\nh\n\x04\x05\x01\x02\x0f\x12\x04\xa4\x02\x02\x1e\x1aZ/\x20Read-only\
    \x20account's\x20data\x20was\x20modified\n\x20instruction\x20modified\
    \x20data\x20of\x20a\x20read-only\x20account\n\n\r\n\x05\x05\x01\x02\x0f\
    \x01\x12\x04\xa4\x02\x02\x18\n\r\n\x05\x05\x01\x02\x0f\x02\x12\x04\xa4\
    \x02\x1b\x1d\n\xb8\x01\n\x04\x05\x01\x02\x10\x12\x04\xa9\x02\x02\x1f\x1a\
    \xa9\x01/\x20An\x20account\x20was\x20referenced\x20more\x20than\x20once\
    \x20in\x20a\x20single\x20instruction\n\x20Deprecated,\x20instructions\
    \x20can\x20now\x20contain\x20duplicate\x20accounts\n\x20instruction\x20c\
    ontains\x20duplicate\x20accounts\n\n\r\n\x05\x05\x01\x02\x10\x01\x12\x04\
    \xa9\x02\x02\x19\n\r\n\x05\x05\x01\x02\x10\x02\x12\x04\xa9\x02\x1c\x1e\n\
    x\n\x04\x05\x01\x02\x11\x12\x04\xad\x02\x02\x1b\x1aj/\x20Executable\x20b\
    it\x20on\x20account\x20changed,\x20but\x20shouldn't\x20have\n\x20instruc\
    tion\x20changed\x20executable\x20bit\x20of\x20an\x20account\n\n\r\n\x05\
    \x05\x01\x02\x11\x01\x12\x04\xad\x02\x02\x15\n\r\n\x05\x05\x01\x02\x11\
    \x02\x12\x04\xad\x02\x18\x1a\nn\n\x04\x05\x01\x02\x12\x12\x04\xb1\x02\
    \x02\x1b\x1a`/\x20Rent_epoch\x20account\x20changed,\x20but\x20shouldn't\
    \x20have\n\x20instruction\x20modified\x20rent\x20epoch\x20of\x20an\x20ac\
    count\n\n\r\n\x05\x05\x01\x02\x12\x01\x12\x04\xb1\x02\x02\x15\n\r\n\x05\
    \x05\x01\x02\x12\x02\x12\x04\xb1\x02\x18\x1a\nl\n\x04\x05\x01\x02\x13\
    \x12\x04\xb5\x02\x02\x1f\x1a^/\x20The\x20instruction\x20expected\x20addi\
    tional\x20account\x20keys\n\x20insufficient\x20account\x20keys\x20for\
    \x20instruction\n\n\r\n\x05\x05\x01\x02\x13\x01\x12\x04\xb5\x02\x02\x19\
    \n\r\n\x05\x05\x01\x02\x13\x02\x12\x04\xb5\x02\x1c\x1e\nw\n\x04\x05\x01\
    \x02\x14\x12\x04\xb9\x02\x02!\x1ai/\x20A\x20non-system\x20program\x20cha\
    nged\x20the\x20size\x20of\x20the\x20account\x20data\n\x20non-system\x20i\
    nstruction\x20changed\x20account\x20size\n\n\r\n\x05\x05\x01\x02\x14\x01\
    \x12\x04\xb9\x02\x02\x1b\n\r\n\x05\x05\x01\x02\x14\x02\x12\x04\xb9\x02\
    \x1e\x20\nk\n\x04\x05\x01\x02\x15\x12\x04\xbd\x02\x02\x1e\x1a]/\x20The\
    \x20instruction\x20expected\x20an\x20executable\x20account\n\x20instruct\
    ion\x20expected\x20an\x20executable\x20account\n\n\r\n\x05\x05\x01\x02\
    \x15\x01\x12\x04\xbd\x02\x02\x18\n\r\n\x05\x05\x01\x02\x15\x02\x12\x04\
    \xbd\x02\x1b\x1d\n\xa0\x01\n\x04\x05\x01\x02\x16\x12\x04\xc1\x02\x02\x1d\
    \x1a\x91\x01/\x20Failed\x20to\x20borrow\x20a\x20reference\x20to\x20accou\
    nt\x20data,\x20already\x20borrowed\n\x20instruction\x20tries\x20to\x20bo\
    rrow\x20reference\x20for\x20an\x20account\x20which\x20is\x20already\x20b\
    orrowed\n\n\r\n\x05\x05\x01\x02\x16\x01\x12\x04\xc1\x02\x02\x17\n\r\n\
    \x05\x05\x01\x02\x16\x02\x12\x04\xc1\x02\x1a\x1c\n\x98\x01\n\x04\x05\x01\
    \x02\x17\x12\x04\xc5\x02\x02\"\x1a\x89\x01/\x20Account\x20data\x20has\
    \x20an\x20outstanding\x20reference\x20after\x20a\x20program's\x20executi\
    on\n\x20instruction\x20left\x20account\x20with\x20an\x20outstanding\x20r\
    eference\x20borrowed\n\n\r\n\x05\x05\x01\x02\x17\x01\x12\x04\xc5\x02\x02\
    \x1c\n\r\n\x05\x05\x01\x02\x17\x02\x12\x04\xc5\x02\x1f!\n\xe3\x02\n\x04\
    \x05\x01\x02\x18\x12\x04\xcb\x02\x02%\x1a\xd4\x02/\x20The\x20same\x20acc\
    ount\x20was\x20multiply\x20passed\x20to\x20an\x20on-chain\x20program's\
    \x20entrypoint,\x20but\x20the\x20program\n/\x20modified\x20them\x20diffe\
    rently.\x20\x20A\x20program\x20can\x20only\x20modify\x20one\x20instance\
    \x20of\x20the\x20account\x20because\n/\x20the\x20runtime\x20cannot\x20de\
    termine\x20which\x20changes\x20to\x20pick\x20or\x20how\x20to\x20merge\
    \x20them\x20if\x20both\x20are\x20modified\n\x20instruction\x20modificati\
    ons\x20of\x20multiply-passed\x20account\x20differ\n\n\r\n\x05\x05\x01\
    \x02\x18\x01\x12\x04\xcb\x02\x02\x1f\n\r\n\x05\x05\x01\x02\x18\x02\x12\
    \x04\xcb\x02\"$\n\x83\x02\n\x04\x05\x01\x02\x19\x12\x04\xd1\x02\x02\x0e\
    \x1a\xf4\x01/\x20Allows\x20on-chain\x20programs\x20to\x20implement\x20pr\
    ogram-specific\x20error\x20types\x20and\x20see\x20them\x20returned\n/\
    \x20by\x20the\x20Solana\x20runtime.\x20A\x20program-specific\x20error\
    \x20may\x20be\x20any\x20type\x20that\x20is\x20represented\x20as\n/\x20or\
    \x20serialized\x20to\x20a\x20u32\x20integer.\n\x20custom\x20program\x20e\
    rror:\x20{0:#x}\n\n\r\n\x05\x05\x01\x02\x19\x01\x12\x04\xd1\x02\x02\x08\
    \n\r\n\x05\x05\x01\x02\x19\x02\x12\x04\xd1\x02\x0b\r\n\xcc\x01\n\x04\x05\
    \x01\x02\x1a\x12\x04\xd6\x02\x02\x15\x1a\xbd\x01/\x20The\x20return\x20va\
    lue\x20from\x20the\x20program\x20was\x20invalid.\x20\x20Valid\x20errors\
    \x20are\x20either\x20a\x20defined\x20builtin\n/\x20error\x20value\x20or\
    \x20a\x20user-defined\x20error\x20in\x20the\x20lower\x2032\x20bits.\n\
    \x20program\x20returned\x20invalid\x20error\x20code\n\n\r\n\x05\x05\x01\
    \x02\x1a\x01\x12\x04\xd6\x02\x02\x0f\n\r\n\x05\x05\x01\x02\x1a\x02\x12\
    \x04\xd6\x02\x12\x14\ne\n\x04\x05\x01\x02\x1b\x12\x04\xda\x02\x02\x20\
    \x1aW/\x20Executable\x20account's\x20data\x20was\x20modified\n\x20instru\
    ction\x20changed\x20executable\x20accounts\x20data\n\n\r\n\x05\x05\x01\
    \x02\x1b\x01\x12\x04\xda\x02\x02\x1a\n\r\n\x05\x05\x01\x02\x1b\x02\x12\
    \x04\xda\x02\x1d\x1f\np\n\x04\x05\x01\x02\x1c\x12\x04\xde\x02\x02!\x1ab/\
    \x20Executable\x20account's\x20lamports\x20modified\n\x20instruction\x20\
    changed\x20the\x20balance\x20of\x20a\x20executable\x20account\n\n\r\n\
    \x05\x05\x01\x02\x1c\x01\x12\x04\xde\x02\x02\x1b\n\r\n\x05\x05\x01\x02\
    \x1c\x02\x12\x04\xde\x02\x1e\x20\na\n\x04\x05\x01\x02\x1d\x12\x04\xe2\
    \x02\x02*\x1aS/\x20Executable\x20accounts\x20must\x20be\x20rent\x20exemp\
    t\n\x20executable\x20accounts\x20must\x20be\x20rent\x20exempt\n\n\r\n\
    \x05\x05\x01\x02\x1d\x01\x12\x04\xe2\x02\x02$\n\r\n\x05\x05\x01\x02\x1d\
    \x02\x12\x04\xe2\x02')\n?\n\x04\x05\x01\x02\x1e\x12\x04\xe6\x02\x02\x1e\
    \x1a1/\x20Unsupported\x20program\x20id\n\x20Unsupported\x20program\x20id\
    \n\n\r\n\x05\x05\x01\x02\x1e\x01\x12\x04\xe6\x02\x02\x18\n\r\n\x05\x05\
    \x01\x02\x1e\x02\x12\x04\xe6\x02\x1b\x1d\nk\n\x04\x05\x01\x02\x1f\x12\
    \x04\xea\x02\x02\x12\x1a]/\x20Cross-program\x20invocation\x20call\x20dep\
    th\x20too\x20deep\n\x20Cross-program\x20invocation\x20call\x20depth\x20t\
    oo\x20deep\n\n\r\n\x05\x05\x01\x02\x1f\x01\x12\x04\xea\x02\x02\x0c\n\r\n\
    \x05\x05\x01\x02\x1f\x02\x12\x04\xea\x02\x0f\x11\nu\n\x04\x05\x01\x02\
    \x20\x12\x04\xee\x02\x02\x17\x1ag/\x20An\x20account\x20required\x20by\
    \x20the\x20instruction\x20is\x20missing\n\x20An\x20account\x20required\
    \x20by\x20the\x20instruction\x20is\x20missing\n\n\r\n\x05\x05\x01\x02\
    \x20\x01\x12\x04\xee\x02\x02\x11\n\r\n\x05\x05\x01\x02\x20\x02\x12\x04\
    \xee\x02\x14\x16\n\x9c\x01\n\x04\x05\x01\x02!\x12\x04\xf2\x02\x02\x1e\
    \x1a\x8d\x01/\x20Cross-program\x20invocation\x20reentrancy\x20not\x20all\
    owed\x20for\x20this\x20instruction\n\x20Cross-program\x20invocation\x20r\
    eentrancy\x20not\x20allowed\x20for\x20this\x20instruction\n\n\r\n\x05\
    \x05\x01\x02!\x01\x12\x04\xf2\x02\x02\x18\n\r\n\x05\x05\x01\x02!\x02\x12\
    \x04\xf2\x02\x1b\x1d\n}\n\x04\x05\x01\x02\"\x12\x04\xf6\x02\x02\x20\x1ao\
    /\x20Length\x20of\x20the\x20seed\x20is\x20too\x20long\x20for\x20address\
    \x20generation\n\x20Length\x20of\x20the\x20seed\x20is\x20too\x20long\x20\
    for\x20address\x20generation\n\n\r\n\x05\x05\x01\x02\"\x01\x12\x04\xf6\
    \x02\x02\x1a\n\r\n\x05\x05\x01\x02\"\x02\x12\x04\xf6\x02\x1d\x1f\nq\n\
    \x04\x05\x01\x02#\x12\x04\xfa\x02\x02\x15\x1ac/\x20Provided\x20seeds\x20\
    do\x20not\x20result\x20in\x20a\x20valid\x20address\n\x20Provided\x20seed\
    s\x20do\x20not\x20result\x20in\x20a\x20valid\x20address\n\n\r\n\x05\x05\
    \x01\x02#\x01\x12\x04\xfa\x02\x02\x0f\n\r\n\x05\x05\x01\x02#\x02\x12\x04\
    \xfa\x02\x12\x14\nd\n\x04\x05\x01\x02$\x12\x04\xfe\x02\x02\x17\x1aV/\x20\
    Failed\x20to\x20reallocate\x20account\x20data\x20of\x20this\x20length\n\
    \x20Failed\x20to\x20reallocate\x20account\x20data\n\n\r\n\x05\x05\x01\
    \x02$\x01\x12\x04\xfe\x02\x02\x11\n\r\n\x05\x05\x01\x02$\x02\x12\x04\xfe\
    \x02\x14\x16\nM\n\x04\x05\x01\x02%\x12\x04\x82\x03\x02%\x1a?/\x20Computa\
    tional\x20budget\x20exceeded\n\x20Computational\x20budget\x20exceeded\n\
    \n\r\n\x05\x05\x01\x02%\x01\x12\x04\x82\x03\x02\x1f\n\r\n\x05\x05\x01\
    \x02%\x02\x12\x04\x82\x03\"$\n\x9e\x01\n\x04\x05\x01\x02&\x12\x04\x86\
    \x03\x02\x1c\x1a\x8f\x01/\x20Cross-program\x20invocation\x20with\x20unau\
    thorized\x20signer\x20or\x20writable\x20account\n\x20Cross-program\x20in\
    vocation\x20with\x20unauthorized\x20signer\x20or\x20writable\x20account\
    \n\n\r\n\x05\x05\x01\x02&\x01\x12\x04\x86\x03\x02\x16\n\r\n\x05\x05\x01\
    \x02&\x02\x12\x04\x86\x03\x19\x1b\n>\n\x04\x05\x01\x02'\x12\x04\x89\x03\
    \x02)\x1a0\x20Failed\x20to\x20create\x20program\x20execution\x20environm\
    ent\n\n\r\n\x05\x05\x01\x02'\x01\x12\x04\x89\x03\x02#\n\r\n\x05\x05\x01\
    \x02'\x02\x12\x04\x89\x03&(\n*\n\x04\x05\x01\x02(\x12\x04\x8c\x03\x02\"\
    \x1a\x1c\x20Program\x20failed\x20to\x20complete\n\n\r\n\x05\x05\x01\x02(\
    \x01\x12\x04\x8c\x03\x02\x1c\n\r\n\x05\x05\x01\x02(\x02\x12\x04\x8c\x03\
    \x1f!\n)\n\x04\x05\x01\x02)\x12\x04\x8f\x03\x02!\x1a\x1b\x20Program\x20f\
    ailed\x20to\x20compile\n\n\r\n\x05\x05\x01\x02)\x01\x12\x04\x8f\x03\x02\
    \x1b\n\r\n\x05\x05\x01\x02)\x02\x12\x04\x8f\x03\x1e\x20\n$\n\x04\x05\x01\
    \x02*\x12\x04\x92\x03\x02\x11\x1a\x16\x20Account\x20is\x20immutable\n\n\
    \r\n\x05\x05\x01\x02*\x01\x12\x04\x92\x03\x02\x0b\n\r\n\x05\x05\x01\x02*\
    \x02\x12\x04\x92\x03\x0e\x10\n,\n\x04\x05\x01\x02+\x12\x04\x95\x03\x02\
    \x1b\x1a\x1e\x20Incorrect\x20authority\x20provided\n\n\r\n\x05\x05\x01\
    \x02+\x01\x12\x04\x95\x03\x02\x15\n\r\n\x05\x05\x01\x02+\x02\x12\x04\x95\
    \x03\x18\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
