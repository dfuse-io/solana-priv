// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `dfuse/solana/codec/v1/codec.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Slot {
    // message fields
    pub id: ::std::string::String,
    pub number: u64,
    pub previous_id: ::std::string::String,
    pub version: u32,
    pub block: ::protobuf::SingularPtrField<Block>,
    pub transactions: ::protobuf::RepeatedField<Transaction>,
    pub transaction_count: u32,
    pub has_split_account_changes: bool,
    pub account_changes_file_ref: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Slot {
    fn default() -> &'a Slot {
        <Slot as ::protobuf::Message>::default_instance()
    }
}

impl Slot {
    pub fn new() -> Slot {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint64 number = 2;


    pub fn get_number(&self) -> u64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }

    // string previous_id = 3;


    pub fn get_previous_id(&self) -> &str {
        &self.previous_id
    }
    pub fn clear_previous_id(&mut self) {
        self.previous_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_id(&mut self, v: ::std::string::String) {
        self.previous_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_id(&mut self) -> &mut ::std::string::String {
        &mut self.previous_id
    }

    // Take field
    pub fn take_previous_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_id, ::std::string::String::new())
    }

    // uint32 version = 4;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // .dfuse.solana.codec.v1.Block block = 5;


    pub fn get_block(&self) -> &Block {
        self.block.as_ref().unwrap_or_else(|| <Block as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: Block) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut Block {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> Block {
        self.block.take().unwrap_or_else(|| Block::new())
    }

    // repeated .dfuse.solana.codec.v1.Transaction transactions = 7;


    pub fn get_transactions(&self) -> &[Transaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    // uint32 transaction_count = 8;


    pub fn get_transaction_count(&self) -> u32 {
        self.transaction_count
    }
    pub fn clear_transaction_count(&mut self) {
        self.transaction_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_transaction_count(&mut self, v: u32) {
        self.transaction_count = v;
    }

    // bool has_split_account_changes = 9;


    pub fn get_has_split_account_changes(&self) -> bool {
        self.has_split_account_changes
    }
    pub fn clear_has_split_account_changes(&mut self) {
        self.has_split_account_changes = false;
    }

    // Param is passed by value, moved
    pub fn set_has_split_account_changes(&mut self, v: bool) {
        self.has_split_account_changes = v;
    }

    // string account_changes_file_ref = 10;


    pub fn get_account_changes_file_ref(&self) -> &str {
        &self.account_changes_file_ref
    }
    pub fn clear_account_changes_file_ref(&mut self) {
        self.account_changes_file_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_changes_file_ref(&mut self, v: ::std::string::String) {
        self.account_changes_file_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_changes_file_ref(&mut self) -> &mut ::std::string::String {
        &mut self.account_changes_file_ref
    }

    // Take field
    pub fn take_account_changes_file_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_changes_file_ref, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Slot {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.transaction_count = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_split_account_changes = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_changes_file_ref)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.previous_id);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.transaction_count != 0 {
            my_size += ::protobuf::rt::value_size(8, self.transaction_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.has_split_account_changes != false {
            my_size += 2;
        }
        if !self.account_changes_file_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.account_changes_file_ref);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.number != 0 {
            os.write_uint64(2, self.number)?;
        }
        if !self.previous_id.is_empty() {
            os.write_string(3, &self.previous_id)?;
        }
        if self.version != 0 {
            os.write_uint32(4, self.version)?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transactions {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.transaction_count != 0 {
            os.write_uint32(8, self.transaction_count)?;
        }
        if self.has_split_account_changes != false {
            os.write_bool(9, self.has_split_account_changes)?;
        }
        if !self.account_changes_file_ref.is_empty() {
            os.write_string(10, &self.account_changes_file_ref)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Slot {
        Slot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Slot| { &m.id },
                |m: &mut Slot| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "number",
                |m: &Slot| { &m.number },
                |m: &mut Slot| { &mut m.number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "previous_id",
                |m: &Slot| { &m.previous_id },
                |m: &mut Slot| { &mut m.previous_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &Slot| { &m.version },
                |m: &mut Slot| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Block>>(
                "block",
                |m: &Slot| { &m.block },
                |m: &mut Slot| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                "transactions",
                |m: &Slot| { &m.transactions },
                |m: &mut Slot| { &mut m.transactions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "transaction_count",
                |m: &Slot| { &m.transaction_count },
                |m: &mut Slot| { &mut m.transaction_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_split_account_changes",
                |m: &Slot| { &m.has_split_account_changes },
                |m: &mut Slot| { &mut m.has_split_account_changes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_changes_file_ref",
                |m: &Slot| { &m.account_changes_file_ref },
                |m: &mut Slot| { &mut m.account_changes_file_ref },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Slot>(
                "Slot",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Slot {
        static instance: ::protobuf::rt::LazyV2<Slot> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Slot::new)
    }
}

impl ::protobuf::Clear for Slot {
    fn clear(&mut self) {
        self.id.clear();
        self.number = 0;
        self.previous_id.clear();
        self.version = 0;
        self.block.clear();
        self.transactions.clear();
        self.transaction_count = 0;
        self.has_split_account_changes = false;
        self.account_changes_file_ref.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Slot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Slot {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    pub id: ::std::string::String,
    pub number: u64,
    pub height: u64,
    pub previous_id: ::std::string::String,
    pub previous_block_slot: u64,
    pub genesis_unix_timestamp: u64,
    pub clock_unix_timestamp: u64,
    pub root_num: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint64 number = 2;


    pub fn get_number(&self) -> u64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u64) {
        self.number = v;
    }

    // uint64 height = 3;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // string previous_id = 4;


    pub fn get_previous_id(&self) -> &str {
        &self.previous_id
    }
    pub fn clear_previous_id(&mut self) {
        self.previous_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_id(&mut self, v: ::std::string::String) {
        self.previous_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_id(&mut self) -> &mut ::std::string::String {
        &mut self.previous_id
    }

    // Take field
    pub fn take_previous_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_id, ::std::string::String::new())
    }

    // uint64 previous_block_slot = 5;


    pub fn get_previous_block_slot(&self) -> u64 {
        self.previous_block_slot
    }
    pub fn clear_previous_block_slot(&mut self) {
        self.previous_block_slot = 0;
    }

    // Param is passed by value, moved
    pub fn set_previous_block_slot(&mut self, v: u64) {
        self.previous_block_slot = v;
    }

    // uint64 genesis_unix_timestamp = 6;


    pub fn get_genesis_unix_timestamp(&self) -> u64 {
        self.genesis_unix_timestamp
    }
    pub fn clear_genesis_unix_timestamp(&mut self) {
        self.genesis_unix_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_genesis_unix_timestamp(&mut self, v: u64) {
        self.genesis_unix_timestamp = v;
    }

    // uint64 clock_unix_timestamp = 7;


    pub fn get_clock_unix_timestamp(&self) -> u64 {
        self.clock_unix_timestamp
    }
    pub fn clear_clock_unix_timestamp(&mut self) {
        self.clock_unix_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_clock_unix_timestamp(&mut self, v: u64) {
        self.clock_unix_timestamp = v;
    }

    // uint64 root_num = 8;


    pub fn get_root_num(&self) -> u64 {
        self.root_num
    }
    pub fn clear_root_num(&mut self) {
        self.root_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_root_num(&mut self, v: u64) {
        self.root_num = v;
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.number = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.previous_block_slot = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.genesis_unix_timestamp = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.clock_unix_timestamp = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.root_num = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.previous_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.previous_id);
        }
        if self.previous_block_slot != 0 {
            my_size += ::protobuf::rt::value_size(5, self.previous_block_slot, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.genesis_unix_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.genesis_unix_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.clock_unix_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(7, self.clock_unix_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.root_num != 0 {
            my_size += ::protobuf::rt::value_size(8, self.root_num, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.number != 0 {
            os.write_uint64(2, self.number)?;
        }
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        if !self.previous_id.is_empty() {
            os.write_string(4, &self.previous_id)?;
        }
        if self.previous_block_slot != 0 {
            os.write_uint64(5, self.previous_block_slot)?;
        }
        if self.genesis_unix_timestamp != 0 {
            os.write_uint64(6, self.genesis_unix_timestamp)?;
        }
        if self.clock_unix_timestamp != 0 {
            os.write_uint64(7, self.clock_unix_timestamp)?;
        }
        if self.root_num != 0 {
            os.write_uint64(8, self.root_num)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Block| { &m.id },
                |m: &mut Block| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "number",
                |m: &Block| { &m.number },
                |m: &mut Block| { &mut m.number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &Block| { &m.height },
                |m: &mut Block| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "previous_id",
                |m: &Block| { &m.previous_id },
                |m: &mut Block| { &mut m.previous_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "previous_block_slot",
                |m: &Block| { &m.previous_block_slot },
                |m: &mut Block| { &mut m.previous_block_slot },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "genesis_unix_timestamp",
                |m: &Block| { &m.genesis_unix_timestamp },
                |m: &mut Block| { &mut m.genesis_unix_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "clock_unix_timestamp",
                |m: &Block| { &m.clock_unix_timestamp },
                |m: &mut Block| { &mut m.clock_unix_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "root_num",
                |m: &Block| { &m.root_num },
                |m: &mut Block| { &mut m.root_num },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Block>(
                "Block",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Block {
        static instance: ::protobuf::rt::LazyV2<Block> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Block::new)
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.id.clear();
        self.number = 0;
        self.height = 0;
        self.previous_id.clear();
        self.previous_block_slot = 0;
        self.genesis_unix_timestamp = 0;
        self.clock_unix_timestamp = 0;
        self.root_num = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Batch {
    // message fields
    pub transactions: ::protobuf::RepeatedField<Transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Batch {
    fn default() -> &'a Batch {
        <Batch as ::protobuf::Message>::default_instance()
    }
}

impl Batch {
    pub fn new() -> Batch {
        ::std::default::Default::default()
    }

    // repeated .dfuse.solana.codec.v1.Transaction transactions = 1;


    pub fn get_transactions(&self) -> &[Transaction] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Batch {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Batch {
        Batch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                "transactions",
                |m: &Batch| { &m.transactions },
                |m: &mut Batch| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Batch>(
                "Batch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Batch {
        static instance: ::protobuf::rt::LazyV2<Batch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Batch::new)
    }
}

impl ::protobuf::Clear for Batch {
    fn clear(&mut self) {
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Batch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Batch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChangesBundle {
    // message fields
    pub transactions: ::protobuf::RepeatedField<AccountChangesPerTrxIndex>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChangesBundle {
    fn default() -> &'a AccountChangesBundle {
        <AccountChangesBundle as ::protobuf::Message>::default_instance()
    }
}

impl AccountChangesBundle {
    pub fn new() -> AccountChangesBundle {
        ::std::default::Default::default()
    }

    // repeated .dfuse.solana.codec.v1.AccountChangesPerTrxIndex transactions = 1;


    pub fn get_transactions(&self) -> &[AccountChangesPerTrxIndex] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<AccountChangesPerTrxIndex>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<AccountChangesPerTrxIndex> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<AccountChangesPerTrxIndex> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountChangesBundle {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChangesBundle {
        AccountChangesBundle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChangesPerTrxIndex>>(
                "transactions",
                |m: &AccountChangesBundle| { &m.transactions },
                |m: &mut AccountChangesBundle| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChangesBundle>(
                "AccountChangesBundle",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChangesBundle {
        static instance: ::protobuf::rt::LazyV2<AccountChangesBundle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChangesBundle::new)
    }
}

impl ::protobuf::Clear for AccountChangesBundle {
    fn clear(&mut self) {
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChangesBundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChangesBundle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChangesPerTrxIndex {
    // message fields
    pub TrxId: ::std::string::String,
    pub instructions: ::protobuf::RepeatedField<AccountChangesPerInstruction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChangesPerTrxIndex {
    fn default() -> &'a AccountChangesPerTrxIndex {
        <AccountChangesPerTrxIndex as ::protobuf::Message>::default_instance()
    }
}

impl AccountChangesPerTrxIndex {
    pub fn new() -> AccountChangesPerTrxIndex {
        ::std::default::Default::default()
    }

    // string TrxId = 1;


    pub fn get_TrxId(&self) -> &str {
        &self.TrxId
    }
    pub fn clear_TrxId(&mut self) {
        self.TrxId.clear();
    }

    // Param is passed by value, moved
    pub fn set_TrxId(&mut self, v: ::std::string::String) {
        self.TrxId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_TrxId(&mut self) -> &mut ::std::string::String {
        &mut self.TrxId
    }

    // Take field
    pub fn take_TrxId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.TrxId, ::std::string::String::new())
    }

    // repeated .dfuse.solana.codec.v1.AccountChangesPerInstruction instructions = 2;


    pub fn get_instructions(&self) -> &[AccountChangesPerInstruction] {
        &self.instructions
    }
    pub fn clear_instructions(&mut self) {
        self.instructions.clear();
    }

    // Param is passed by value, moved
    pub fn set_instructions(&mut self, v: ::protobuf::RepeatedField<AccountChangesPerInstruction>) {
        self.instructions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instructions(&mut self) -> &mut ::protobuf::RepeatedField<AccountChangesPerInstruction> {
        &mut self.instructions
    }

    // Take field
    pub fn take_instructions(&mut self) -> ::protobuf::RepeatedField<AccountChangesPerInstruction> {
        ::std::mem::replace(&mut self.instructions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountChangesPerTrxIndex {
    fn is_initialized(&self) -> bool {
        for v in &self.instructions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.TrxId)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instructions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.TrxId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.TrxId);
        }
        for value in &self.instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.TrxId.is_empty() {
            os.write_string(1, &self.TrxId)?;
        }
        for v in &self.instructions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChangesPerTrxIndex {
        AccountChangesPerTrxIndex::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "TrxId",
                |m: &AccountChangesPerTrxIndex| { &m.TrxId },
                |m: &mut AccountChangesPerTrxIndex| { &mut m.TrxId },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChangesPerInstruction>>(
                "instructions",
                |m: &AccountChangesPerTrxIndex| { &m.instructions },
                |m: &mut AccountChangesPerTrxIndex| { &mut m.instructions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChangesPerTrxIndex>(
                "AccountChangesPerTrxIndex",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChangesPerTrxIndex {
        static instance: ::protobuf::rt::LazyV2<AccountChangesPerTrxIndex> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChangesPerTrxIndex::new)
    }
}

impl ::protobuf::Clear for AccountChangesPerTrxIndex {
    fn clear(&mut self) {
        self.TrxId.clear();
        self.instructions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChangesPerTrxIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChangesPerTrxIndex {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChangesPerInstruction {
    // message fields
    pub changes: ::protobuf::RepeatedField<AccountChange>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChangesPerInstruction {
    fn default() -> &'a AccountChangesPerInstruction {
        <AccountChangesPerInstruction as ::protobuf::Message>::default_instance()
    }
}

impl AccountChangesPerInstruction {
    pub fn new() -> AccountChangesPerInstruction {
        ::std::default::Default::default()
    }

    // repeated .dfuse.solana.codec.v1.AccountChange changes = 1;


    pub fn get_changes(&self) -> &[AccountChange] {
        &self.changes
    }
    pub fn clear_changes(&mut self) {
        self.changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_changes(&mut self, v: ::protobuf::RepeatedField<AccountChange>) {
        self.changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_changes(&mut self) -> &mut ::protobuf::RepeatedField<AccountChange> {
        &mut self.changes
    }

    // Take field
    pub fn take_changes(&mut self) -> ::protobuf::RepeatedField<AccountChange> {
        ::std::mem::replace(&mut self.changes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AccountChangesPerInstruction {
    fn is_initialized(&self) -> bool {
        for v in &self.changes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.changes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.changes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChangesPerInstruction {
        AccountChangesPerInstruction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChange>>(
                "changes",
                |m: &AccountChangesPerInstruction| { &m.changes },
                |m: &mut AccountChangesPerInstruction| { &mut m.changes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChangesPerInstruction>(
                "AccountChangesPerInstruction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChangesPerInstruction {
        static instance: ::protobuf::rt::LazyV2<AccountChangesPerInstruction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChangesPerInstruction::new)
    }
}

impl ::protobuf::Clear for AccountChangesPerInstruction {
    fn clear(&mut self) {
        self.changes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChangesPerInstruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChangesPerInstruction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message fields
    pub id: ::std::string::String,
    pub slot_num: u64,
    pub slot_hash: ::std::string::String,
    pub index: u64,
    pub additional_signatures: ::protobuf::RepeatedField<::std::string::String>,
    pub header: ::protobuf::SingularPtrField<MessageHeader>,
    pub account_keys: ::protobuf::RepeatedField<::std::string::String>,
    pub recent_blockhash: ::std::string::String,
    pub log_messages: ::protobuf::RepeatedField<::std::string::String>,
    pub instructions: ::protobuf::RepeatedField<Instruction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // uint64 slot_num = 2;


    pub fn get_slot_num(&self) -> u64 {
        self.slot_num
    }
    pub fn clear_slot_num(&mut self) {
        self.slot_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_slot_num(&mut self, v: u64) {
        self.slot_num = v;
    }

    // string slot_hash = 3;


    pub fn get_slot_hash(&self) -> &str {
        &self.slot_hash
    }
    pub fn clear_slot_hash(&mut self) {
        self.slot_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_slot_hash(&mut self, v: ::std::string::String) {
        self.slot_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slot_hash(&mut self) -> &mut ::std::string::String {
        &mut self.slot_hash
    }

    // Take field
    pub fn take_slot_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slot_hash, ::std::string::String::new())
    }

    // uint64 index = 4;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // repeated string additional_signatures = 5;


    pub fn get_additional_signatures(&self) -> &[::std::string::String] {
        &self.additional_signatures
    }
    pub fn clear_additional_signatures(&mut self) {
        self.additional_signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_additional_signatures(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.additional_signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_additional_signatures(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.additional_signatures
    }

    // Take field
    pub fn take_additional_signatures(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.additional_signatures, ::protobuf::RepeatedField::new())
    }

    // .dfuse.solana.codec.v1.MessageHeader header = 6;


    pub fn get_header(&self) -> &MessageHeader {
        self.header.as_ref().unwrap_or_else(|| <MessageHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: MessageHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut MessageHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> MessageHeader {
        self.header.take().unwrap_or_else(|| MessageHeader::new())
    }

    // repeated string account_keys = 7;


    pub fn get_account_keys(&self) -> &[::std::string::String] {
        &self.account_keys
    }
    pub fn clear_account_keys(&mut self) {
        self.account_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.account_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.account_keys
    }

    // Take field
    pub fn take_account_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.account_keys, ::protobuf::RepeatedField::new())
    }

    // string recent_blockhash = 8;


    pub fn get_recent_blockhash(&self) -> &str {
        &self.recent_blockhash
    }
    pub fn clear_recent_blockhash(&mut self) {
        self.recent_blockhash.clear();
    }

    // Param is passed by value, moved
    pub fn set_recent_blockhash(&mut self, v: ::std::string::String) {
        self.recent_blockhash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recent_blockhash(&mut self) -> &mut ::std::string::String {
        &mut self.recent_blockhash
    }

    // Take field
    pub fn take_recent_blockhash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.recent_blockhash, ::std::string::String::new())
    }

    // repeated string log_messages = 12;


    pub fn get_log_messages(&self) -> &[::std::string::String] {
        &self.log_messages
    }
    pub fn clear_log_messages(&mut self) {
        self.log_messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_messages(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.log_messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_log_messages(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.log_messages
    }

    // Take field
    pub fn take_log_messages(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.log_messages, ::protobuf::RepeatedField::new())
    }

    // repeated .dfuse.solana.codec.v1.Instruction instructions = 13;


    pub fn get_instructions(&self) -> &[Instruction] {
        &self.instructions
    }
    pub fn clear_instructions(&mut self) {
        self.instructions.clear();
    }

    // Param is passed by value, moved
    pub fn set_instructions(&mut self, v: ::protobuf::RepeatedField<Instruction>) {
        self.instructions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instructions(&mut self) -> &mut ::protobuf::RepeatedField<Instruction> {
        &mut self.instructions
    }

    // Take field
    pub fn take_instructions(&mut self) -> ::protobuf::RepeatedField<Instruction> {
        ::std::mem::replace(&mut self.instructions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.instructions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.slot_num = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slot_hash)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.additional_signatures)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.account_keys)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.recent_blockhash)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.log_messages)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instructions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.slot_num != 0 {
            my_size += ::protobuf::rt::value_size(2, self.slot_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.slot_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.slot_hash);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(4, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.additional_signatures {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.account_keys {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.recent_blockhash.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.recent_blockhash);
        }
        for value in &self.log_messages {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        for value in &self.instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.slot_num != 0 {
            os.write_uint64(2, self.slot_num)?;
        }
        if !self.slot_hash.is_empty() {
            os.write_string(3, &self.slot_hash)?;
        }
        if self.index != 0 {
            os.write_uint64(4, self.index)?;
        }
        for v in &self.additional_signatures {
            os.write_string(5, &v)?;
        };
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.account_keys {
            os.write_string(7, &v)?;
        };
        if !self.recent_blockhash.is_empty() {
            os.write_string(8, &self.recent_blockhash)?;
        }
        for v in &self.log_messages {
            os.write_string(12, &v)?;
        };
        for v in &self.instructions {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Transaction| { &m.id },
                |m: &mut Transaction| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "slot_num",
                |m: &Transaction| { &m.slot_num },
                |m: &mut Transaction| { &mut m.slot_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slot_hash",
                |m: &Transaction| { &m.slot_hash },
                |m: &mut Transaction| { &mut m.slot_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &Transaction| { &m.index },
                |m: &mut Transaction| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "additional_signatures",
                |m: &Transaction| { &m.additional_signatures },
                |m: &mut Transaction| { &mut m.additional_signatures },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageHeader>>(
                "header",
                |m: &Transaction| { &m.header },
                |m: &mut Transaction| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_keys",
                |m: &Transaction| { &m.account_keys },
                |m: &mut Transaction| { &mut m.account_keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recent_blockhash",
                |m: &Transaction| { &m.recent_blockhash },
                |m: &mut Transaction| { &mut m.recent_blockhash },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_messages",
                |m: &Transaction| { &m.log_messages },
                |m: &mut Transaction| { &mut m.log_messages },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instruction>>(
                "instructions",
                |m: &Transaction| { &m.instructions },
                |m: &mut Transaction| { &mut m.instructions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transaction>(
                "Transaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Transaction {
        static instance: ::protobuf::rt::LazyV2<Transaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transaction::new)
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.id.clear();
        self.slot_num = 0;
        self.slot_hash.clear();
        self.index = 0;
        self.additional_signatures.clear();
        self.header.clear();
        self.account_keys.clear();
        self.recent_blockhash.clear();
        self.log_messages.clear();
        self.instructions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageHeader {
    // message fields
    pub num_required_signatures: u32,
    pub num_readonly_signed_accounts: u32,
    pub num_readonly_unsigned_accounts: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageHeader {
    fn default() -> &'a MessageHeader {
        <MessageHeader as ::protobuf::Message>::default_instance()
    }
}

impl MessageHeader {
    pub fn new() -> MessageHeader {
        ::std::default::Default::default()
    }

    // uint32 num_required_signatures = 1;


    pub fn get_num_required_signatures(&self) -> u32 {
        self.num_required_signatures
    }
    pub fn clear_num_required_signatures(&mut self) {
        self.num_required_signatures = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_required_signatures(&mut self, v: u32) {
        self.num_required_signatures = v;
    }

    // uint32 num_readonly_signed_accounts = 2;


    pub fn get_num_readonly_signed_accounts(&self) -> u32 {
        self.num_readonly_signed_accounts
    }
    pub fn clear_num_readonly_signed_accounts(&mut self) {
        self.num_readonly_signed_accounts = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_readonly_signed_accounts(&mut self, v: u32) {
        self.num_readonly_signed_accounts = v;
    }

    // uint32 num_readonly_unsigned_accounts = 3;


    pub fn get_num_readonly_unsigned_accounts(&self) -> u32 {
        self.num_readonly_unsigned_accounts
    }
    pub fn clear_num_readonly_unsigned_accounts(&mut self) {
        self.num_readonly_unsigned_accounts = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_readonly_unsigned_accounts(&mut self, v: u32) {
        self.num_readonly_unsigned_accounts = v;
    }
}

impl ::protobuf::Message for MessageHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_required_signatures = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_readonly_signed_accounts = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_readonly_unsigned_accounts = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_required_signatures != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_required_signatures, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_readonly_signed_accounts != 0 {
            my_size += ::protobuf::rt::value_size(2, self.num_readonly_signed_accounts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_readonly_unsigned_accounts != 0 {
            my_size += ::protobuf::rt::value_size(3, self.num_readonly_unsigned_accounts, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_required_signatures != 0 {
            os.write_uint32(1, self.num_required_signatures)?;
        }
        if self.num_readonly_signed_accounts != 0 {
            os.write_uint32(2, self.num_readonly_signed_accounts)?;
        }
        if self.num_readonly_unsigned_accounts != 0 {
            os.write_uint32(3, self.num_readonly_unsigned_accounts)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageHeader {
        MessageHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_required_signatures",
                |m: &MessageHeader| { &m.num_required_signatures },
                |m: &mut MessageHeader| { &mut m.num_required_signatures },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_readonly_signed_accounts",
                |m: &MessageHeader| { &m.num_readonly_signed_accounts },
                |m: &mut MessageHeader| { &mut m.num_readonly_signed_accounts },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_readonly_unsigned_accounts",
                |m: &MessageHeader| { &m.num_readonly_unsigned_accounts },
                |m: &mut MessageHeader| { &mut m.num_readonly_unsigned_accounts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageHeader>(
                "MessageHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageHeader {
        static instance: ::protobuf::rt::LazyV2<MessageHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageHeader::new)
    }
}

impl ::protobuf::Clear for MessageHeader {
    fn clear(&mut self) {
        self.num_required_signatures = 0;
        self.num_readonly_signed_accounts = 0;
        self.num_readonly_unsigned_accounts = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Instruction {
    // message fields
    pub program_id: ::std::string::String,
    pub account_keys: ::protobuf::RepeatedField<::std::string::String>,
    pub data: ::std::vec::Vec<u8>,
    pub ordinal: u32,
    pub parent_ordinal: u32,
    pub depth: u32,
    pub balance_changes: ::protobuf::RepeatedField<BalanceChange>,
    pub account_changes: ::protobuf::RepeatedField<AccountChange>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Instruction {
    fn default() -> &'a Instruction {
        <Instruction as ::protobuf::Message>::default_instance()
    }
}

impl Instruction {
    pub fn new() -> Instruction {
        ::std::default::Default::default()
    }

    // string program_id = 3;


    pub fn get_program_id(&self) -> &str {
        &self.program_id
    }
    pub fn clear_program_id(&mut self) {
        self.program_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_program_id(&mut self, v: ::std::string::String) {
        self.program_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_program_id(&mut self) -> &mut ::std::string::String {
        &mut self.program_id
    }

    // Take field
    pub fn take_program_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.program_id, ::std::string::String::new())
    }

    // repeated string account_keys = 4;


    pub fn get_account_keys(&self) -> &[::std::string::String] {
        &self.account_keys
    }
    pub fn clear_account_keys(&mut self) {
        self.account_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.account_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.account_keys
    }

    // Take field
    pub fn take_account_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.account_keys, ::protobuf::RepeatedField::new())
    }

    // bytes data = 5;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // uint32 ordinal = 6;


    pub fn get_ordinal(&self) -> u32 {
        self.ordinal
    }
    pub fn clear_ordinal(&mut self) {
        self.ordinal = 0;
    }

    // Param is passed by value, moved
    pub fn set_ordinal(&mut self, v: u32) {
        self.ordinal = v;
    }

    // uint32 parent_ordinal = 7;


    pub fn get_parent_ordinal(&self) -> u32 {
        self.parent_ordinal
    }
    pub fn clear_parent_ordinal(&mut self) {
        self.parent_ordinal = 0;
    }

    // Param is passed by value, moved
    pub fn set_parent_ordinal(&mut self, v: u32) {
        self.parent_ordinal = v;
    }

    // uint32 depth = 8;


    pub fn get_depth(&self) -> u32 {
        self.depth
    }
    pub fn clear_depth(&mut self) {
        self.depth = 0;
    }

    // Param is passed by value, moved
    pub fn set_depth(&mut self, v: u32) {
        self.depth = v;
    }

    // repeated .dfuse.solana.codec.v1.BalanceChange balance_changes = 9;


    pub fn get_balance_changes(&self) -> &[BalanceChange] {
        &self.balance_changes
    }
    pub fn clear_balance_changes(&mut self) {
        self.balance_changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance_changes(&mut self, v: ::protobuf::RepeatedField<BalanceChange>) {
        self.balance_changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_balance_changes(&mut self) -> &mut ::protobuf::RepeatedField<BalanceChange> {
        &mut self.balance_changes
    }

    // Take field
    pub fn take_balance_changes(&mut self) -> ::protobuf::RepeatedField<BalanceChange> {
        ::std::mem::replace(&mut self.balance_changes, ::protobuf::RepeatedField::new())
    }

    // repeated .dfuse.solana.codec.v1.AccountChange account_changes = 10;


    pub fn get_account_changes(&self) -> &[AccountChange] {
        &self.account_changes
    }
    pub fn clear_account_changes(&mut self) {
        self.account_changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_changes(&mut self, v: ::protobuf::RepeatedField<AccountChange>) {
        self.account_changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_changes(&mut self) -> &mut ::protobuf::RepeatedField<AccountChange> {
        &mut self.account_changes
    }

    // Take field
    pub fn take_account_changes(&mut self) -> ::protobuf::RepeatedField<AccountChange> {
        ::std::mem::replace(&mut self.account_changes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Instruction {
    fn is_initialized(&self) -> bool {
        for v in &self.balance_changes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.account_changes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.program_id)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.account_keys)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ordinal = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.parent_ordinal = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.depth = tmp;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.balance_changes)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.account_changes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.program_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.program_id);
        }
        for value in &self.account_keys {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        if self.ordinal != 0 {
            my_size += ::protobuf::rt::value_size(6, self.ordinal, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.parent_ordinal != 0 {
            my_size += ::protobuf::rt::value_size(7, self.parent_ordinal, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.depth != 0 {
            my_size += ::protobuf::rt::value_size(8, self.depth, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.balance_changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.account_changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.program_id.is_empty() {
            os.write_string(3, &self.program_id)?;
        }
        for v in &self.account_keys {
            os.write_string(4, &v)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        if self.ordinal != 0 {
            os.write_uint32(6, self.ordinal)?;
        }
        if self.parent_ordinal != 0 {
            os.write_uint32(7, self.parent_ordinal)?;
        }
        if self.depth != 0 {
            os.write_uint32(8, self.depth)?;
        }
        for v in &self.balance_changes {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.account_changes {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Instruction {
        Instruction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "program_id",
                |m: &Instruction| { &m.program_id },
                |m: &mut Instruction| { &mut m.program_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_keys",
                |m: &Instruction| { &m.account_keys },
                |m: &mut Instruction| { &mut m.account_keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &Instruction| { &m.data },
                |m: &mut Instruction| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "ordinal",
                |m: &Instruction| { &m.ordinal },
                |m: &mut Instruction| { &mut m.ordinal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "parent_ordinal",
                |m: &Instruction| { &m.parent_ordinal },
                |m: &mut Instruction| { &mut m.parent_ordinal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "depth",
                |m: &Instruction| { &m.depth },
                |m: &mut Instruction| { &mut m.depth },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BalanceChange>>(
                "balance_changes",
                |m: &Instruction| { &m.balance_changes },
                |m: &mut Instruction| { &mut m.balance_changes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountChange>>(
                "account_changes",
                |m: &Instruction| { &m.account_changes },
                |m: &mut Instruction| { &mut m.account_changes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Instruction>(
                "Instruction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Instruction {
        static instance: ::protobuf::rt::LazyV2<Instruction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Instruction::new)
    }
}

impl ::protobuf::Clear for Instruction {
    fn clear(&mut self) {
        self.program_id.clear();
        self.account_keys.clear();
        self.data.clear();
        self.ordinal = 0;
        self.parent_ordinal = 0;
        self.depth = 0;
        self.balance_changes.clear();
        self.account_changes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Instruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instruction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BalanceChange {
    // message fields
    pub pubkey: ::std::string::String,
    pub prev_lamports: u64,
    pub new_lamports: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BalanceChange {
    fn default() -> &'a BalanceChange {
        <BalanceChange as ::protobuf::Message>::default_instance()
    }
}

impl BalanceChange {
    pub fn new() -> BalanceChange {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }

    // uint64 prev_lamports = 2;


    pub fn get_prev_lamports(&self) -> u64 {
        self.prev_lamports
    }
    pub fn clear_prev_lamports(&mut self) {
        self.prev_lamports = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_lamports(&mut self, v: u64) {
        self.prev_lamports = v;
    }

    // uint64 new_lamports = 3;


    pub fn get_new_lamports(&self) -> u64 {
        self.new_lamports
    }
    pub fn clear_new_lamports(&mut self) {
        self.new_lamports = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_lamports(&mut self, v: u64) {
        self.new_lamports = v;
    }
}

impl ::protobuf::Message for BalanceChange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.prev_lamports = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.new_lamports = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        if self.prev_lamports != 0 {
            my_size += ::protobuf::rt::value_size(2, self.prev_lamports, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.new_lamports != 0 {
            my_size += ::protobuf::rt::value_size(3, self.new_lamports, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        if self.prev_lamports != 0 {
            os.write_uint64(2, self.prev_lamports)?;
        }
        if self.new_lamports != 0 {
            os.write_uint64(3, self.new_lamports)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BalanceChange {
        BalanceChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &BalanceChange| { &m.pubkey },
                |m: &mut BalanceChange| { &mut m.pubkey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "prev_lamports",
                |m: &BalanceChange| { &m.prev_lamports },
                |m: &mut BalanceChange| { &mut m.prev_lamports },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "new_lamports",
                |m: &BalanceChange| { &m.new_lamports },
                |m: &mut BalanceChange| { &mut m.new_lamports },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BalanceChange>(
                "BalanceChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BalanceChange {
        static instance: ::protobuf::rt::LazyV2<BalanceChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BalanceChange::new)
    }
}

impl ::protobuf::Clear for BalanceChange {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.prev_lamports = 0;
        self.new_lamports = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BalanceChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BalanceChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountChange {
    // message fields
    pub pubkey: ::std::string::String,
    pub prev_data: ::std::vec::Vec<u8>,
    pub new_data: ::std::vec::Vec<u8>,
    pub new_data_length: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountChange {
    fn default() -> &'a AccountChange {
        <AccountChange as ::protobuf::Message>::default_instance()
    }
}

impl AccountChange {
    pub fn new() -> AccountChange {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }

    // bytes prev_data = 2;


    pub fn get_prev_data(&self) -> &[u8] {
        &self.prev_data
    }
    pub fn clear_prev_data(&mut self) {
        self.prev_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_prev_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.prev_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.prev_data
    }

    // Take field
    pub fn take_prev_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.prev_data, ::std::vec::Vec::new())
    }

    // bytes new_data = 3;


    pub fn get_new_data(&self) -> &[u8] {
        &self.new_data
    }
    pub fn clear_new_data(&mut self) {
        self.new_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.new_data
    }

    // Take field
    pub fn take_new_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.new_data, ::std::vec::Vec::new())
    }

    // uint64 new_data_length = 4;


    pub fn get_new_data_length(&self) -> u64 {
        self.new_data_length
    }
    pub fn clear_new_data_length(&mut self) {
        self.new_data_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_data_length(&mut self, v: u64) {
        self.new_data_length = v;
    }
}

impl ::protobuf::Message for AccountChange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.prev_data)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.new_data)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.new_data_length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        if !self.prev_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.prev_data);
        }
        if !self.new_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.new_data);
        }
        if self.new_data_length != 0 {
            my_size += ::protobuf::rt::value_size(4, self.new_data_length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        if !self.prev_data.is_empty() {
            os.write_bytes(2, &self.prev_data)?;
        }
        if !self.new_data.is_empty() {
            os.write_bytes(3, &self.new_data)?;
        }
        if self.new_data_length != 0 {
            os.write_uint64(4, self.new_data_length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountChange {
        AccountChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &AccountChange| { &m.pubkey },
                |m: &mut AccountChange| { &mut m.pubkey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "prev_data",
                |m: &AccountChange| { &m.prev_data },
                |m: &mut AccountChange| { &mut m.prev_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "new_data",
                |m: &AccountChange| { &m.new_data },
                |m: &mut AccountChange| { &mut m.new_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "new_data_length",
                |m: &AccountChange| { &m.new_data_length },
                |m: &mut AccountChange| { &mut m.new_data_length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccountChange>(
                "AccountChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccountChange {
        static instance: ::protobuf::rt::LazyV2<AccountChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountChange::new)
    }
}

impl ::protobuf::Clear for AccountChange {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.prev_data.clear();
        self.new_data.clear();
        self.new_data_length = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!dfuse/solana/codec/v1/codec.proto\x12\x15dfuse.solana.codec.v1\"\x86\
    \x03\n\x04Slot\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06nu\
    mber\x18\x02\x20\x01(\x04R\x06number\x12\x1f\n\x0bprevious_id\x18\x03\
    \x20\x01(\tR\npreviousId\x12\x18\n\x07version\x18\x04\x20\x01(\rR\x07ver\
    sion\x122\n\x05block\x18\x05\x20\x01(\x0b2\x1c.dfuse.solana.codec.v1.Blo\
    ckR\x05block\x12F\n\x0ctransactions\x18\x07\x20\x03(\x0b2\".dfuse.solana\
    .codec.v1.TransactionR\x0ctransactions\x12+\n\x11transaction_count\x18\
    \x08\x20\x01(\rR\x10transactionCount\x129\n\x19has_split_account_changes\
    \x18\t\x20\x01(\x08R\x16hasSplitAccountChanges\x127\n\x18account_changes\
    _file_ref\x18\n\x20\x01(\tR\x15accountChangesFileRef\"\x9b\x02\n\x05Bloc\
    k\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06number\x18\x02\
    \x20\x01(\x04R\x06number\x12\x16\n\x06height\x18\x03\x20\x01(\x04R\x06he\
    ight\x12\x1f\n\x0bprevious_id\x18\x04\x20\x01(\tR\npreviousId\x12.\n\x13\
    previous_block_slot\x18\x05\x20\x01(\x04R\x11previousBlockSlot\x124\n\
    \x16genesis_unix_timestamp\x18\x06\x20\x01(\x04R\x14genesisUnixTimestamp\
    \x120\n\x14clock_unix_timestamp\x18\x07\x20\x01(\x04R\x12clockUnixTimest\
    amp\x12\x19\n\x08root_num\x18\x08\x20\x01(\x04R\x07rootNum\"O\n\x05Batch\
    \x12F\n\x0ctransactions\x18\x01\x20\x03(\x0b2\".dfuse.solana.codec.v1.Tr\
    ansactionR\x0ctransactions\"l\n\x14AccountChangesBundle\x12T\n\x0ctransa\
    ctions\x18\x01\x20\x03(\x0b20.dfuse.solana.codec.v1.AccountChangesPerTrx\
    IndexR\x0ctransactions\"\x8a\x01\n\x19AccountChangesPerTrxIndex\x12\x14\
    \n\x05TrxId\x18\x01\x20\x01(\tR\x05TrxId\x12W\n\x0cinstructions\x18\x02\
    \x20\x03(\x0b23.dfuse.solana.codec.v1.AccountChangesPerInstructionR\x0ci\
    nstructions\"^\n\x1cAccountChangesPerInstruction\x12>\n\x07changes\x18\
    \x01\x20\x03(\x0b2$.dfuse.solana.codec.v1.AccountChangeR\x07changes\"\
    \x97\x03\n\x0bTransaction\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    \x19\n\x08slot_num\x18\x02\x20\x01(\x04R\x07slotNum\x12\x1b\n\tslot_hash\
    \x18\x03\x20\x01(\tR\x08slotHash\x12\x14\n\x05index\x18\x04\x20\x01(\x04\
    R\x05index\x123\n\x15additional_signatures\x18\x05\x20\x03(\tR\x14additi\
    onalSignatures\x12<\n\x06header\x18\x06\x20\x01(\x0b2$.dfuse.solana.code\
    c.v1.MessageHeaderR\x06header\x12!\n\x0caccount_keys\x18\x07\x20\x03(\tR\
    \x0baccountKeys\x12)\n\x10recent_blockhash\x18\x08\x20\x01(\tR\x0frecent\
    Blockhash\x12!\n\x0clog_messages\x18\x0c\x20\x03(\tR\x0blogMessages\x12F\
    \n\x0cinstructions\x18\r\x20\x03(\x0b2\".dfuse.solana.codec.v1.Instructi\
    onR\x0cinstructions\"\xcd\x01\n\rMessageHeader\x126\n\x17num_required_si\
    gnatures\x18\x01\x20\x01(\rR\x15numRequiredSignatures\x12?\n\x1cnum_read\
    only_signed_accounts\x18\x02\x20\x01(\rR\x19numReadonlySignedAccounts\
    \x12C\n\x1enum_readonly_unsigned_accounts\x18\x03\x20\x01(\rR\x1bnumRead\
    onlyUnsignedAccounts\"\xd8\x02\n\x0bInstruction\x12\x1d\n\nprogram_id\
    \x18\x03\x20\x01(\tR\tprogramId\x12!\n\x0caccount_keys\x18\x04\x20\x03(\
    \tR\x0baccountKeys\x12\x12\n\x04data\x18\x05\x20\x01(\x0cR\x04data\x12\
    \x18\n\x07ordinal\x18\x06\x20\x01(\rR\x07ordinal\x12%\n\x0eparent_ordina\
    l\x18\x07\x20\x01(\rR\rparentOrdinal\x12\x14\n\x05depth\x18\x08\x20\x01(\
    \rR\x05depth\x12M\n\x0fbalance_changes\x18\t\x20\x03(\x0b2$.dfuse.solana\
    .codec.v1.BalanceChangeR\x0ebalanceChanges\x12M\n\x0faccount_changes\x18\
    \n\x20\x03(\x0b2$.dfuse.solana.codec.v1.AccountChangeR\x0eaccountChanges\
    \"o\n\rBalanceChange\x12\x16\n\x06pubkey\x18\x01\x20\x01(\tR\x06pubkey\
    \x12#\n\rprev_lamports\x18\x02\x20\x01(\x04R\x0cprevLamports\x12!\n\x0cn\
    ew_lamports\x18\x03\x20\x01(\x04R\x0bnewLamports\"\x87\x01\n\rAccountCha\
    nge\x12\x16\n\x06pubkey\x18\x01\x20\x01(\tR\x06pubkey\x12\x1b\n\tprev_da\
    ta\x18\x02\x20\x01(\x0cR\x08prevData\x12\x19\n\x08new_data\x18\x03\x20\
    \x01(\x0cR\x07newData\x12&\n\x0fnew_data_length\x18\x04\x20\x01(\x04R\rn\
    ewDataLengthBCZAgithub.com/dfuse-io/dfuse-solana/pb/dfuse/solana/codec/v\
    1;pbcodecJ\x97&\n\x06\x12\x04\0\0\x7f\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\x1e\n\x08\n\x01\x08\x12\x03\x03\0X\n\
    \t\n\x02\x08\x0b\x12\x03\x03\0X\n\n\n\x02\x04\0\x12\x04\x05\0\x11\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x05\x08\x0c\n6\n\x04\x04\0\x02\0\x12\x03\x06\
    \x02\x10\")\x20hash\x20of\x20the\x20last\x20Entry\x20closing\x20the\x20s\
    lot\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x06\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x0e\
    \x0f\n,\n\x04\x04\0\x02\x01\x12\x03\x07\x02\x14\"\x1f\x20slot\x20number,\
    \x20not\x20block\x20number\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\t\x0f\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x07\x12\x13\n4\n\x04\x04\0\x02\x02\x12\x03\x08\
    \x02\x19\"'\x20corresponds\x20to\x20the\x20previous\x20SLOT\x20hash\n\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x08\t\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x08\x17\
    \x18\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x02\x15\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\t\x10\
    \n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x13\x14\n\x0b\n\x04\x04\0\x02\
    \x04\x12\x03\n\x02\x12\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\n\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\n\x08\r\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\n\x10\x11\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0c\x02(\n\x0c\
    \n\x05\x04\0\x02\x05\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\
    \x12\x03\x0c\x0b\x16\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0c\x17#\n\
    \x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0c&'\n\x0b\n\x04\x04\0\x02\x06\x12\
    \x03\r\x02\x1f\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\r\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03\r\t\x1a\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\r\x1d\x1e\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0f\x02%\n\x0c\n\x05\
    \x04\0\x02\x07\x05\x12\x03\x0f\x02\x06\n\x0c\n\x05\x04\0\x02\x07\x01\x12\
    \x03\x0f\x07\x20\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0f#$\n\x0b\n\x04\
    \x04\0\x02\x08\x12\x03\x10\x02'\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\
    \x10\x02\x08\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x10\t!\n\x0c\n\x05\
    \x04\0\x02\x08\x03\x12\x03\x10$&\n\n\n\x02\x04\x01\x12\x04\x13\0\x1c\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\r\n3\n\x04\x04\x01\x02\0\x12\x03\
    \x14\x02\x10\"&\x20corresponds\x20to\x20the\x20Slot\x20id\x20(or\x20hash\
    )\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x14\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x14\x0e\x0f\n<\n\x04\x04\x01\x02\x01\x12\x03\x15\x02\x14\"/\x20correspo\
    nds\x20to\x20the\x20Slot\x20number\x20for\x20this\x20block\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x15\t\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x15\x12\x13\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03\x16\x02\x14\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\
    \t\x0f\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x16\x12\x13\nV\n\x04\x04\
    \x01\x02\x03\x12\x03\x17\x02\x19\"I\x20corresponds\x20to\x20the\x20previ\
    ous_blockhash,\x20might\x20skip\x20some\x20slots,\x20so\x20beware\n\n\
    \x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03\x17\t\x14\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\
    \x17\x17\x18\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x18\x02!\n\x0c\n\x05\
    \x04\x01\x02\x04\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\
    \x12\x03\x18\t\x1c\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x18\x1f\x20\n\
    \x0b\n\x04\x04\x01\x02\x05\x12\x03\x19\x02$\n\x0c\n\x05\x04\x01\x02\x05\
    \x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x19\t\
    \x1f\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x19\"#\n\x0b\n\x04\x04\x01\
    \x02\x06\x12\x03\x1a\x02\"\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x1a\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x1a\t\x1d\n\x0c\n\x05\
    \x04\x01\x02\x06\x03\x12\x03\x1a\x20!\n\x0b\n\x04\x04\x01\x02\x07\x12\
    \x03\x1b\x02\x16\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x1b\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x07\x01\x12\x03\x1b\t\x11\n\x0c\n\x05\x04\x01\x02\
    \x07\x03\x12\x03\x1b\x14\x15\n\n\n\x02\x04\x02\x12\x04\x1e\0\x20\x01\n\n\
    \n\x03\x04\x02\x01\x12\x03\x1e\x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x1f\x02(\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x03\x1f\x0b\x16\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03\x1f\x17#\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1f&'\nQ\n\x02\x04\
    \x03\x12\x04#\0&\x01\x1aE\x20Bundled\x20in\x20separate\x20files,\x20refe\
    renced\x20by\x20`account_changes_file_ref`\n\n\n\n\x03\x04\x03\x01\x12\
    \x03#\x08\x1c\nP\n\x04\x04\x03\x02\0\x12\x03%\x026\x1aC\x20Maps\x20to\
    \x20the\x20index\x20of\x20the\x20`repeated`\x20field\x20for\x20Block::tr\
    ansactions\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03%\x02\n\n\x0c\n\x05\
    \x04\x03\x02\0\x06\x12\x03%\x0b$\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03%%\
    1\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03%45\n\n\n\x02\x04\x04\x12\x04(\0.\
    \x01\n\n\n\x03\x04\x04\x01\x12\x03(\x08!\n\x0b\n\x04\x04\x04\x02\0\x12\
    \x03)\x02\x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03)\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03)\t\x0e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03)\
    \x11\x12\nh\n\x04\x04\x04\x02\x01\x12\x03-\x029\x1a[\x20Maps\x20to\x20th\
    e\x20index\x20within\x20the\x20`repeated`\x20field\x20of\x20the\x20proto\
    \x20for\n\x20Transaction::instructions\n\n\x0c\n\x05\x04\x04\x02\x01\x04\
    \x12\x03-\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03-\x0b'\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03-(4\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03-78\n\n\n\x02\x04\x05\x12\x040\03\x01\n\n\n\x03\x04\x05\x01\x12\x030\
    \x08$\n=\n\x04\x04\x05\x02\0\x12\x032\x02%\x1a0\x20Data\x20to\x20be\x20p\
    ut\x20in\x20Instruction::account_changes\n\n\x0c\n\x05\x04\x05\x02\0\x04\
    \x12\x032\x02\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x032\x0b\x18\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x032\x19\x20\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x032#$\n\n\n\x02\x04\x06\x12\x045\0P\x01\n\n\n\x03\x04\x06\x01\x12\
    \x035\x08\x13\n~\n\x04\x04\x06\x02\0\x12\x038\x02\x10\x1aq\x20The\x20tra\
    nsaction\x20ID\x20corresponds\x20to\x20the\x20_first_\n\x20signature.\
    \x20Additional\x20signatures\x20are\x20in\x20`additional_signatures`.\n\
    \n\x0c\n\x05\x04\x06\x02\0\x05\x12\x038\x02\x08\n\x0c\n\x05\x04\x06\x02\
    \0\x01\x12\x038\t\x0b\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x038\x0e\x0f\nC\
    \n\x04\x04\x06\x02\x01\x12\x03;\x02\x16\x1a6\x20slot_num\x20could\x20be\
    \x20zero\x20for\x20non-executed\x20transactions\n\n\x0c\n\x05\x04\x06\
    \x02\x01\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03;\t\
    \x11\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03;\x14\x15\nE\n\x04\x04\x06\
    \x02\x02\x12\x03=\x02\x17\x1a8\x20slot_hash\x20could\x20be\x20empty\x20f\
    or\x20non-executed\x20transactions\n\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\
    \x03=\x02\x08\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03=\t\x12\n\x0c\n\x05\
    \x04\x06\x02\x02\x03\x12\x03=\x15\x16\n\xc2\x01\n\x04\x04\x06\x02\x03\
    \x12\x03B\x02\x13\x1a\xb4\x01\x20Index\x20from\x20within\x20a\x20single\
    \x20Slot,\x20deterministically\x20ordered\x20to\x20the\n\x20best\x20of\
    \x20our\x20ability\x20using\x20the\x20transaction\x20ID\x20as\x20a\x20so\
    rt\x20key\x20for\n\x20the\x20batch\x20of\x20transactions\x20executed\x20\
    in\x20parallel.\n\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\x03B\x02\x08\n\x0c\
    \n\x05\x04\x06\x02\x03\x01\x12\x03B\t\x0e\n\x0c\n\x05\x04\x06\x02\x03\
    \x03\x12\x03B\x11\x12\n\x0b\n\x04\x04\x06\x02\x04\x12\x03D\x02,\n\x0c\n\
    \x05\x04\x06\x02\x04\x04\x12\x03D\x02\n\n\x0c\n\x05\x04\x06\x02\x04\x05\
    \x12\x03D\x0b\x11\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\x03D\x12'\n\x0c\n\
    \x05\x04\x06\x02\x04\x03\x12\x03D*+\n\x0b\n\x04\x04\x06\x02\x05\x12\x03F\
    \x02\x1b\n\x0c\n\x05\x04\x06\x02\x05\x06\x12\x03F\x02\x0f\n\x0c\n\x05\
    \x04\x06\x02\x05\x01\x12\x03F\x10\x16\n\x0c\n\x05\x04\x06\x02\x05\x03\
    \x12\x03F\x19\x1a\n/\n\x04\x04\x06\x02\x06\x12\x03H\x02#\x1a\"\x20From\
    \x20the\x20original\x20Message\x20object\n\n\x0c\n\x05\x04\x06\x02\x06\
    \x04\x12\x03H\x02\n\n\x0c\n\x05\x04\x06\x02\x06\x05\x12\x03H\x0b\x11\n\
    \x0c\n\x05\x04\x06\x02\x06\x01\x12\x03H\x12\x1e\n\x0c\n\x05\x04\x06\x02\
    \x06\x03\x12\x03H!\"\n/\n\x04\x04\x06\x02\x07\x12\x03J\x02\x1e\x1a\"\x20\
    From\x20the\x20original\x20Message\x20object\n\n\x0c\n\x05\x04\x06\x02\
    \x07\x05\x12\x03J\x02\x08\n\x0c\n\x05\x04\x06\x02\x07\x01\x12\x03J\t\x19\
    \n\x0c\n\x05\x04\x06\x02\x07\x03\x12\x03J\x1c\x1d\n;\n\x04\x04\x06\x02\
    \x08\x12\x03M\x02$\x1a.\x20What\x20follows\x20Once\x20executed\x20these\
    \x20can\x20be\x20set:\n\n\x0c\n\x05\x04\x06\x02\x08\x04\x12\x03M\x02\n\n\
    \x0c\n\x05\x04\x06\x02\x08\x05\x12\x03M\x0b\x11\n\x0c\n\x05\x04\x06\x02\
    \x08\x01\x12\x03M\x12\x1e\n\x0c\n\x05\x04\x06\x02\x08\x03\x12\x03M!#\nN\
    \n\x04\x04\x06\x02\t\x12\x03O\x02)\x1aA\x20Instructions,\x20containing\
    \x20both\x20top-level\x20and\x20nested\x20transactions\n\n\x0c\n\x05\x04\
    \x06\x02\t\x04\x12\x03O\x02\n\n\x0c\n\x05\x04\x06\x02\t\x06\x12\x03O\x0b\
    \x16\n\x0c\n\x05\x04\x06\x02\t\x01\x12\x03O\x17#\n\x0c\n\x05\x04\x06\x02\
    \t\x03\x12\x03O&(\n\n\n\x02\x04\x07\x12\x04R\0V\x01\n\n\n\x03\x04\x07\
    \x01\x12\x03R\x08\x15\n\x0b\n\x04\x04\x07\x02\0\x12\x03S\x02%\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x03S\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03S\t\x20\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03S#$\n\x0b\n\x04\x04\
    \x07\x02\x01\x12\x03T\x02*\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03T\x02\
    \x08\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03T\t%\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03T()\n\x0b\n\x04\x04\x07\x02\x02\x12\x03U\x02,\n\x0c\n\
    \x05\x04\x07\x02\x02\x05\x12\x03U\x02\x08\n\x0c\n\x05\x04\x07\x02\x02\
    \x01\x12\x03U\t'\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03U*+\n\x9f\x03\n\
    \x02\x04\x08\x12\x04e\0r\x012\x92\x03*\n-\x20instr1\x20(id=1,\x20parent=\
    0)\n-\x20instr2\x20(id=2,\x20parent=0)\x20(pubkey1\x20is\x20writable)\n-\
    \x20instr3\x20(id=3,\x20parent=2)\x20(pubkey1\x20is\x20writable)\n-\x20i\
    nstr4\x20(id=4,\x20parent=3)\x20(pubkey1\x20is\x20writable)\n-\x20instr5\
    \x20(id=5,\x20parent=4)\x20(pubkey1\x20is\x20writable,\x20mutates\x20pub\
    key1)\ncollect\x20delta\x20of\x20pubkey1\ncollect\x20delta\x20of\x20pubk\
    ey1\x20ONLY\x20IF\x20CHANGED\x20AGAIN,\x20from\x20last\x20time\x20we\x20\
    took\x20a\x20snapshot\x20of\x20it.\ncollect\x20delta\x20of\x20pubkey1\n-\
    \x20instr6\x20(id=6,\x20parent=0)\n\n\n\n\x03\x04\x08\x01\x12\x03e\x08\
    \x13\n\x0b\n\x04\x04\x08\x02\0\x12\x03f\x02\x18\n\x0c\n\x05\x04\x08\x02\
    \0\x05\x12\x03f\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03f\t\x13\n\
    \x0c\n\x05\x04\x08\x02\0\x03\x12\x03f\x16\x17\n\x0b\n\x04\x04\x08\x02\
    \x01\x12\x03g\x02#\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x03g\x02\n\n\x0c\
    \n\x05\x04\x08\x02\x01\x05\x12\x03g\x0b\x11\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x03g\x12\x1e\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03g!\"\n\x0b\
    \n\x04\x04\x08\x02\x02\x12\x03h\x02\x11\n\x0c\n\x05\x04\x08\x02\x02\x05\
    \x12\x03h\x02\x07\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03h\x08\x0c\n\x0c\
    \n\x05\x04\x08\x02\x02\x03\x12\x03h\x0f\x10\na\n\x04\x04\x08\x02\x03\x12\
    \x03l\x02\x152T\x20What\x20follows\x20is\x20execution\x20trace\x20data,\
    \x20could\x20be\x20empty\x20for\x20un-executed\x20transactions.\n\n\x0c\
    \n\x05\x04\x08\x02\x03\x05\x12\x03l\x02\x08\n\x0c\n\x05\x04\x08\x02\x03\
    \x01\x12\x03l\t\x10\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03l\x13\x14\n\
    \x0b\n\x04\x04\x08\x02\x04\x12\x03m\x02\x1c\n\x0c\n\x05\x04\x08\x02\x04\
    \x05\x12\x03m\x02\x08\n\x0c\n\x05\x04\x08\x02\x04\x01\x12\x03m\t\x17\n\
    \x0c\n\x05\x04\x08\x02\x04\x03\x12\x03m\x1a\x1b\n\x0b\n\x04\x04\x08\x02\
    \x05\x12\x03n\x02\x13\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\x03n\x02\x08\n\
    \x0c\n\x05\x04\x08\x02\x05\x01\x12\x03n\t\x0e\n\x0c\n\x05\x04\x08\x02\
    \x05\x03\x12\x03n\x11\x12\n\x0b\n\x04\x04\x08\x02\x06\x12\x03p\x02-\n\
    \x0c\n\x05\x04\x08\x02\x06\x04\x12\x03p\x02\n\n\x0c\n\x05\x04\x08\x02\
    \x06\x06\x12\x03p\x0b\x18\n\x0c\n\x05\x04\x08\x02\x06\x01\x12\x03p\x19(\
    \n\x0c\n\x05\x04\x08\x02\x06\x03\x12\x03p+,\n\x0b\n\x04\x04\x08\x02\x07\
    \x12\x03q\x02.\n\x0c\n\x05\x04\x08\x02\x07\x04\x12\x03q\x02\n\n\x0c\n\
    \x05\x04\x08\x02\x07\x06\x12\x03q\x0b\x18\n\x0c\n\x05\x04\x08\x02\x07\
    \x01\x12\x03q\x19(\n\x0c\n\x05\x04\x08\x02\x07\x03\x12\x03q+-\n\n\n\x02\
    \x04\t\x12\x04t\0x\x01\n\n\n\x03\x04\t\x01\x12\x03t\x08\x15\n\x0b\n\x04\
    \x04\t\x02\0\x12\x03u\x02\x14\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03u\x02\
    \x08\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03u\t\x0f\n\x0c\n\x05\x04\t\x02\0\
    \x03\x12\x03u\x12\x13\n\x0b\n\x04\x04\t\x02\x01\x12\x03v\x02\x1b\n\x0c\n\
    \x05\x04\t\x02\x01\x05\x12\x03v\x02\x08\n\x0c\n\x05\x04\t\x02\x01\x01\
    \x12\x03v\t\x16\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03v\x19\x1a\n\x0b\n\
    \x04\x04\t\x02\x02\x12\x03w\x02\x1a\n\x0c\n\x05\x04\t\x02\x02\x05\x12\
    \x03w\x02\x08\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03w\t\x15\n\x0c\n\x05\
    \x04\t\x02\x02\x03\x12\x03w\x18\x19\n\n\n\x02\x04\n\x12\x04z\0\x7f\x01\n\
    \n\n\x03\x04\n\x01\x12\x03z\x08\x15\n\x0b\n\x04\x04\n\x02\0\x12\x03{\x02\
    \x14\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03{\x02\x08\n\x0c\n\x05\x04\n\x02\
    \0\x01\x12\x03{\t\x0f\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03{\x12\x13\n\x0b\
    \n\x04\x04\n\x02\x01\x12\x03|\x02\x16\n\x0c\n\x05\x04\n\x02\x01\x05\x12\
    \x03|\x02\x07\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03|\x08\x11\n\x0c\n\x05\
    \x04\n\x02\x01\x03\x12\x03|\x14\x15\n\x0b\n\x04\x04\n\x02\x02\x12\x03}\
    \x02\x15\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03}\x02\x07\n\x0c\n\x05\x04\
    \n\x02\x02\x01\x12\x03}\x08\x10\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03}\
    \x13\x14\n\x0b\n\x04\x04\n\x02\x03\x12\x03~\x02\x1d\n\x0c\n\x05\x04\n\
    \x02\x03\x05\x12\x03~\x02\x08\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03~\t\
    \x18\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03~\x1b\x1cb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
